
import
  os,
  re,
  strutils,
  strformat
#  tables,

const pix_in_row = 16

proc cvt_file(filename: string)
proc dtohex_color(code: string): string


proc main() =
  echo "/* Auto-generated by pgm2c, do not edit manually! */\n"

  for fn in commandLineParams():
    cvt_file fn


proc cvt_file(filename: string) =
  let name = splitFile(filename)[1]

  var
    fd_in = filename.open()
    line: string

    im_width: uint
    im_height: uint
    im_colors: uint
    im_data = "uint32_t bitmap_" & name & "_data[] = {\n"

    color_mark: bool
    data_sem: bool
    cnt: uint = 0

  while fd_in.readLine(line):
    if line[0] == '#' or line == "P2": # header
      continue

    elif line =~ re"^(\d+)\s+(\d+)$": # width height
      (im_width, im_height) = (matches[0].parseUInt, matches[1].parseUInt)
      color_mark = true

    elif color_mark: # colors
      im_colors = line.parseUInt
      color_mark = false

    else: # data pixels
      var
        num = dtohex_color line
        not_1st_ln = ", " & num

      if cnt == im_width:
        not_1st_ln = ",\n" & num
        cnt = 0

      cnt.inc

      im_data &= (if data_sem: not_1st_ln else: num)

      data_sem = true

  fd_in.close()

  im_data = &"omBitmapT bitmap_{name};\n" &
    &"bitmap_{name}.Width = {im_width};\n" &
    &"bitmap_{name}.Height = {im_height};\n" &
    &"bitmap_{name}.ColorsNumOf = {im_colors};\n" &
    &"bitmap_{name}.Display = &oled1;\n" &
    &"uint16_t image_colors = {im_colors};\n" &
    im_data & "\n};\n" &
    &"bitmap_{name}.RawData = bitmap_{name}_data;\n"

  echo im_data


proc dtohex_color(code: string): string =
  result = case code
    of "0": &"0x00"
    of "15": &"0x11"
    of "30": &"0x22"
    of "45": &"0x33"
    of "60": &"0x44"
    of "75": &"0x55"
    of "90": &"0x66"
    of "105": &"0x77"
    of "120": &"0x88"
    of "135": &"0x99"
    of "150": &"0xAA"
    of "165": &"0xBB"
    of "180": &"0xCC"
    of "195": &"0xDD"
    of "210": &"0xEE"
    of "225": &"0xFF"
    else: "!!!__FIXME_ERROR_FIXME__!!!"


main()
