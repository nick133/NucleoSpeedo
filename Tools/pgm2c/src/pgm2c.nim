
import
  os,
  re,
  strutils,
  strformat,
  parseopt
#  tables,


proc cvt_file(filename: string, out_h_str: var string, out_c_str: var string, out_c_str_g: var string)
proc dtohex_color(code: string): string


proc main() =
  var
    out_c: string
    out_h: string
    pgm_dir: string
    out_c_buf: string
    out_c_buf_g: string # globals
    out_h_buf: string

  for kind, key, val in getopt():
    case kind
      of cmdShortOption, cmdLongOption, cmdArgument:
        case key
          of "h": out_h = val
          of "c": out_c = val
          of "p": pgm_dir = val
      of cmdEnd: assert(false)

  out_h_buf = """/* C header auto-generated by pgm2c, do not edit! */

#include "omgui.h"

void Bitmaps_Init(void);

"""

  for path in walkFiles(&"{pgm_dir}/*.pgm"):
    path.cvt_file(out_h_buf, out_c_buf, out_c_buf_g)

  out_c_buf = """/* C source auto-generated by pgm2c, do not edit! */

#include "omgui.h"

""" & out_c_buf_g & """

void Bitmaps_Init(void)
{
""" & out_c_buf & "}\n"

  out_h.writeFile(out_h_buf)
  out_c.writeFile(out_c_buf)


proc cvt_file(filename: string, out_h_str: var string, out_c_str: var string, out_c_str_g: var string) =
  let name = splitFile(filename)[1]

  var
    fd_in = filename.open()
    line: string
    outcbuf: string

    im_width: uint
    im_height: uint
    im_colors: uint

    color_mark: bool
    data_sem: bool
    cnt: uint = 0

  while fd_in.readLine(line):
    if line[0] == '#' or line == "P2": # header
      continue

    elif line =~ re"^(\d+)\s+(\d+)$": # width height
      (im_width, im_height) = (matches[0].parseUInt, matches[1].parseUInt)
      let npixels = im_width * im_height
      outcbuf = &"  uint32_t bitmap_{name}_data[{npixels}] = " & "{\n"
      color_mark = true

    elif color_mark: # colors
      im_colors = line.parseUInt
      color_mark = false

    else: # data pixels
      var
        num = dtohex_color line
        not_1st_ln = ", " & num

      if cnt == im_width:
        not_1st_ln = ",\n" & num
        cnt = 0

      cnt.inc

      outcbuf &= (if data_sem: not_1st_ln else: num)

      data_sem = true

  fd_in.close()

  outcbuf = &"  bitmap_{name}.Width = {im_width};\n" &
    &"  bitmap_{name}.Height = {im_height};\n" &
    &"  bitmap_{name}.IsAlpha = False;\n" &
    &"  bitmap_{name}.ColorsNumOf = 16;\n" &
    outcbuf & "\n};\n" &
    &"  bitmap_{name}.RawData = bitmap_{name}_data;\n\n"

  out_h_str &= &"extern omBitmapT bitmap_{name};\n"
  out_c_str &= outcbuf
  out_c_str_g &= &"omBitmapT bitmap_{name};\n"


proc dtohex_color(code: string): string =
  result = case code
    of "0": &"0x00"
    of "15": &"0x11"
    of "30": &"0x22"
    of "45": &"0x33"
    of "60": &"0x44"
    of "75": &"0x55"
    of "90": &"0x66"
    of "105": &"0x77"
    of "120": &"0x88"
    of "135": &"0x99"
    of "150": &"0xAA"
    of "165": &"0xBB"
    of "180": &"0xCC"
    of "195": &"0xDD"
    of "210": &"0xEE"
    of "225": &"0xFF"
    else: "!!!__INVALID_COLOR_CODE__!!!"


main()
