
NucleoSpeedo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000080c  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007540  08007540  00017540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001764  2000007c  080075cc  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200017e0  080075cc  000217e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000bfde  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0001d392  00000000  00000000  0002c08a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003a28  00000000  00000000  0004941c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001748  00000000  00000000  0004ce48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001558  00000000  00000000  0004e590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007bbe  00000000  00000000  0004fae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000576a6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006344  00000000  00000000  00057724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d1c 	.word	0x08006d1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006d1c 	.word	0x08006d1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000584:	f000 ff88 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000588:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800058a:	e003      	b.n	8000594 <LoopCopyDataInit>

0800058c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800058e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000590:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000592:	3104      	adds	r1, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000594:	480a      	ldr	r0, [pc, #40]	; (80005c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000598:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800059a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800059c:	d3f6      	bcc.n	800058c <CopyDataInit>
	ldr	r2, =_sbss
 800059e:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80005a0:	e002      	b.n	80005a8 <LoopFillZerobss>

080005a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80005a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80005a4:	f842 3b04 	str.w	r3, [r2], #4

080005a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <LoopForever+0x16>)
	cmp	r2, r3
 80005aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80005ac:	d3f9      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ae:	f005 ff6b 	bl	8006488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f000 f979 	bl	80008a8 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80005bc:	08007550 	.word	0x08007550
	ldr	r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005c4:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 80005c8:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 80005cc:	200017e0 	.word	0x200017e0

080005d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_IRQHandler>
	...

080005d4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <_sbrk+0x50>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d102      	bne.n	80005ea <_sbrk+0x16>
		heap_end = &end;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <_sbrk+0x50>)
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <_sbrk+0x54>)
 80005e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <_sbrk+0x50>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <_sbrk+0x50>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4413      	add	r3, r2
 80005f8:	466a      	mov	r2, sp
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d907      	bls.n	800060e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80005fe:	f005 ff3d 	bl	800647c <__errno>
 8000602:	4602      	mov	r2, r0
 8000604:	230c      	movs	r3, #12
 8000606:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800060c:	e006      	b.n	800061c <_sbrk+0x48>
	}

	heap_end += incr;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <_sbrk+0x50>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	4a03      	ldr	r2, [pc, #12]	; (8000624 <_sbrk+0x50>)
 8000618:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800061a:	68fb      	ldr	r3, [r7, #12]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000098 	.word	0x20000098
 8000628:	200017e0 	.word	0x200017e0

0800062c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000642:	4a43      	ldr	r2, [pc, #268]	; (8000750 <MX_GPIO_Init+0x124>)
 8000644:	4b42      	ldr	r3, [pc, #264]	; (8000750 <MX_GPIO_Init+0x124>)
 8000646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800064e:	4b40      	ldr	r3, [pc, #256]	; (8000750 <MX_GPIO_Init+0x124>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4a3d      	ldr	r2, [pc, #244]	; (8000750 <MX_GPIO_Init+0x124>)
 800065c:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <MX_GPIO_Init+0x124>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000666:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <MX_GPIO_Init+0x124>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	4a37      	ldr	r2, [pc, #220]	; (8000750 <MX_GPIO_Init+0x124>)
 8000674:	4b36      	ldr	r3, [pc, #216]	; (8000750 <MX_GPIO_Init+0x124>)
 8000676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_GPIO_Init+0x124>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	4a31      	ldr	r2, [pc, #196]	; (8000750 <MX_GPIO_Init+0x124>)
 800068c:	4b30      	ldr	r3, [pc, #192]	; (8000750 <MX_GPIO_Init+0x124>)
 800068e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_GPIO_Init+0x124>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2108      	movs	r1, #8
 80006a6:	482b      	ldr	r0, [pc, #172]	; (8000754 <MX_GPIO_Init+0x128>)
 80006a8:	f001 fc14 	bl	8001ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80006ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b2:	2303      	movs	r3, #3
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4825      	ldr	r0, [pc, #148]	; (8000758 <MX_GPIO_Init+0x12c>)
 80006c2:	f001 fa9d 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA5 PA6
                           PA7 PA8 PA9 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80006c6:	f641 33f2 	movw	r3, #7154	; 0x1bf2
 80006ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f001 fa8f 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_GPIO_Init+0x130>)
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f001 fa82 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80006fc:	23b3      	movs	r3, #179	; 0xb3
 80006fe:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000700:	2303      	movs	r3, #3
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4811      	ldr	r0, [pc, #68]	; (8000754 <MX_GPIO_Init+0x128>)
 8000710:	f001 fa76 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8000714:	2308      	movs	r3, #8
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	480a      	ldr	r0, [pc, #40]	; (8000754 <MX_GPIO_Init+0x128>)
 800072c:	f001 fa68 	bl	8001c00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000730:	2308      	movs	r3, #8
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	2303      	movs	r3, #3
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <MX_GPIO_Init+0x134>)
 8000744:	f001 fa5c 	bl	8001c00 <HAL_GPIO_Init>

}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40021000 	.word	0x40021000
 8000754:	48000400 	.word	0x48000400
 8000758:	48000800 	.word	0x48000800
 800075c:	10110000 	.word	0x10110000
 8000760:	48001c00 	.word	0x48001c00

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	f001 fbd3 	bl	8001f4a <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fb9b 	bl	8000ee4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007b2:	f001 ff33 	bl	800261c <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fb92 	bl	8000ee4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007c4:	f001 ff75 	bl	80026b2 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fb89 	bl	8000ee4 <Error_Handler>
  }

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20001590 	.word	0x20001590
 80007dc:	40005400 	.word	0x40005400
 80007e0:	10909cec 	.word	0x10909cec

080007e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <HAL_I2C_MspInit+0xb8>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d145      	bne.n	8000892 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b23      	ldr	r3, [pc, #140]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000820:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083c:	2312      	movs	r3, #18
 800083e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2302      	movs	r3, #2
 8000846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000848:	2304      	movs	r3, #4
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000856:	f001 f9d3 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086a:	2304      	movs	r3, #4
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	; (80008a4 <HAL_I2C_MspInit+0xc0>)
 8000876:	f001 f9c3 	bl	8001c00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_I2C_MspInit+0xbc>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40005400 	.word	0x40005400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b0bf      	sub	sp, #252	; 0xfc
 80008ae:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
//  config.TempUnits = TEMP_CELSIUS;
  config.SpeedUnits = UnitsSpeedKph;
 80008b0:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <main+0x50>)
 80008b2:	2300      	movs	r3, #0
 80008b4:	7013      	strb	r3, [r2, #0]
  config.ShowLogo = False;
 80008b6:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <main+0x50>)
 80008b8:	2300      	movs	r3, #0
 80008ba:	7113      	strb	r3, [r2, #4]
  config.WheelCirc = 1285;
 80008bc:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <main+0x50>)
 80008be:	f240 5305 	movw	r3, #1285	; 0x505
 80008c2:	8053      	strh	r3, [r2, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f001 f862 	bl	800198c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f9a8 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f7ff feae 	bl	800062c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 fd5e 	bl	8001390 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80008d4:	f7ff ff46 	bl	8000764 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008d8:	f000 fca8 	bl	800122c <MX_TIM2_Init>
  MX_RTC_Init();
 80008dc:	f000 fb7e 	bl	8000fdc <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008e0:	f000 fa18 	bl	8000d14 <MX_NVIC_Init>
  //// Init struct data for Display, Screens and Widgets ////

  /****************************************************************************\
   **** Display ***************************************************************
   ****************************************************************************/
  oled1.Id = 0;
 80008e4:	4a05      	ldr	r2, [pc, #20]	; (80008fc <main+0x54>)
 80008e6:	2300      	movs	r3, #0
 80008e8:	8013      	strh	r3, [r2, #0]
  oled1.Screen = (config.ShowLogo == True) ? &screenLogo : &screenMain;
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <main+0x50>)
 80008ec:	791b      	ldrb	r3, [r3, #4]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d108      	bne.n	8000904 <main+0x5c>
 80008f2:	4a03      	ldr	r2, [pc, #12]	; (8000900 <main+0x58>)
 80008f4:	e007      	b.n	8000906 <main+0x5e>
 80008f6:	bf00      	nop
 80008f8:	20001694 	.word	0x20001694
 80008fc:	200015f4 	.word	0x200015f4
 8000900:	20001650 	.word	0x20001650
 8000904:	4ab9      	ldr	r2, [pc, #740]	; (8000bec <main+0x344>)
 8000906:	4bba      	ldr	r3, [pc, #744]	; (8000bf0 <main+0x348>)
 8000908:	605a      	str	r2, [r3, #4]
  oled1.InitCallback = DisplayInitCb;
 800090a:	4ab9      	ldr	r2, [pc, #740]	; (8000bf0 <main+0x348>)
 800090c:	4bb9      	ldr	r3, [pc, #740]	; (8000bf4 <main+0x34c>)
 800090e:	6093      	str	r3, [r2, #8]

  /****************************************************************************\
   ** Screen: Logo
   ****************************************************************************/
  const uint8_t LogoWidgetsNumOf = 1;
 8000910:	2301      	movs	r3, #1
 8000912:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  omWidgetT logoWidgets[LogoWidgetsNumOf];
 8000916:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800091a:	3b01      	subs	r3, #1
 800091c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000920:	f897 10ef 	ldrb.w	r1, [r7, #239]	; 0xef
 8000924:	f04f 0200 	mov.w	r2, #0
 8000928:	460b      	mov	r3, r1
 800092a:	4614      	mov	r4, r2
 800092c:	00e6      	lsls	r6, r4, #3
 800092e:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8000932:	00dd      	lsls	r5, r3, #3
 8000934:	462b      	mov	r3, r5
 8000936:	4634      	mov	r4, r6
 8000938:	1a5b      	subs	r3, r3, r1
 800093a:	eb64 0402 	sbc.w	r4, r4, r2
 800093e:	ea4f 1944 	mov.w	r9, r4, lsl #5
 8000942:	ea49 69d3 	orr.w	r9, r9, r3, lsr #27
 8000946:	ea4f 1843 	mov.w	r8, r3, lsl #5
 800094a:	4643      	mov	r3, r8
 800094c:	464c      	mov	r4, r9
 800094e:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8000952:	4613      	mov	r3, r2
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	1a9b      	subs	r3, r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	f897 10ef 	ldrb.w	r1, [r7, #239]	; 0xef
 800095e:	f04f 0200 	mov.w	r2, #0
 8000962:	460b      	mov	r3, r1
 8000964:	4614      	mov	r4, r2
 8000966:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800096a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800096e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8000972:	4653      	mov	r3, sl
 8000974:	465c      	mov	r4, fp
 8000976:	1a5b      	subs	r3, r3, r1
 8000978:	eb64 0402 	sbc.w	r4, r4, r2
 800097c:	0162      	lsls	r2, r4, #5
 800097e:	627a      	str	r2, [r7, #36]	; 0x24
 8000980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000982:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000986:	627a      	str	r2, [r7, #36]	; 0x24
 8000988:	015b      	lsls	r3, r3, #5
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8000990:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8000994:	4613      	mov	r3, r2
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	1a9b      	subs	r3, r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	3303      	adds	r3, #3
 800099e:	3307      	adds	r3, #7
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	ebad 0d03 	sub.w	sp, sp, r3
 80009a8:	ab02      	add	r3, sp, #8
 80009aa:	3303      	adds	r3, #3
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  screenLogo.Id = IdScreenLogo;
 80009b4:	4b90      	ldr	r3, [pc, #576]	; (8000bf8 <main+0x350>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]
  screenLogo.Display = &oled1;
 80009ba:	4b8f      	ldr	r3, [pc, #572]	; (8000bf8 <main+0x350>)
 80009bc:	4a8c      	ldr	r2, [pc, #560]	; (8000bf0 <main+0x348>)
 80009be:	605a      	str	r2, [r3, #4]
  screenLogo.Widgets = logoWidgets;
 80009c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009c4:	4a8c      	ldr	r2, [pc, #560]	; (8000bf8 <main+0x350>)
 80009c6:	6093      	str	r3, [r2, #8]
  screenLogo.ShowCallback = ScreenLogoShowCb;
 80009c8:	4b8b      	ldr	r3, [pc, #556]	; (8000bf8 <main+0x350>)
 80009ca:	4a8c      	ldr	r2, [pc, #560]	; (8000bfc <main+0x354>)
 80009cc:	611a      	str	r2, [r3, #16]
  screenLogo.HideCallback = NULL;
 80009ce:	4b8a      	ldr	r3, [pc, #552]	; (8000bf8 <main+0x350>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]

  //////////////////////////////////////
  /// Widget: Logo
  omWidgetT wgtLogoImage;
  wgtLogoImage.Id = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8

  struct WgtCfgLogoImage {
    float Speed;
  } wgtCfgLogoImage;

  wgtLogoImage.Id = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
  wgtLogoImage.Config = &wgtCfgLogoImage;
 80009e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0


  logoWidgets[0] = wgtLogoImage;
 80009e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009ec:	461d      	mov	r5, r3
 80009ee:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 80009f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80009fa:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  /****************************************************************************\
   ** Screen: Main
   ****************************************************************************/
  const uint8_t MainWidgetsNumOf = 4;
 80009fe:	2304      	movs	r3, #4
 8000a00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  omWidgetT mainWidgets[MainWidgetsNumOf];
 8000a04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000a0e:	f897 10e3 	ldrb.w	r1, [r7, #227]	; 0xe3
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	460b      	mov	r3, r1
 8000a18:	4614      	mov	r4, r2
 8000a1a:	00e0      	lsls	r0, r4, #3
 8000a1c:	61f8      	str	r0, [r7, #28]
 8000a1e:	69f8      	ldr	r0, [r7, #28]
 8000a20:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8000a24:	61f8      	str	r0, [r7, #28]
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000a2e:	1a5b      	subs	r3, r3, r1
 8000a30:	eb64 0402 	sbc.w	r4, r4, r2
 8000a34:	0162      	lsls	r2, r4, #5
 8000a36:	617a      	str	r2, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000a3e:	617a      	str	r2, [r7, #20]
 8000a40:	015b      	lsls	r3, r3, #5
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000a48:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	1a9b      	subs	r3, r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	f897 10e3 	ldrb.w	r1, [r7, #227]	; 0xe3
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	4614      	mov	r4, r2
 8000a60:	00e0      	lsls	r0, r4, #3
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000a74:	1a5b      	subs	r3, r3, r1
 8000a76:	eb64 0402 	sbc.w	r4, r4, r2
 8000a7a:	0162      	lsls	r2, r4, #5
 8000a7c:	607a      	str	r2, [r7, #4]
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	015b      	lsls	r3, r3, #5
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8000a8e:	f897 20e3 	ldrb.w	r2, [r7, #227]	; 0xe3
 8000a92:	4613      	mov	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	3307      	adds	r3, #7
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	ebad 0d03 	sub.w	sp, sp, r3
 8000aa6:	ab02      	add	r3, sp, #8
 8000aa8:	3303      	adds	r3, #3
 8000aaa:	089b      	lsrs	r3, r3, #2
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  screenMain.Id = IdScreenMain;
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <main+0x344>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	801a      	strh	r2, [r3, #0]
  screenMain.Display = &oled1;
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <main+0x344>)
 8000aba:	4a4d      	ldr	r2, [pc, #308]	; (8000bf0 <main+0x348>)
 8000abc:	605a      	str	r2, [r3, #4]
  screenMain.Widgets = &mainWidgets[0];
 8000abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000ac2:	4a4a      	ldr	r2, [pc, #296]	; (8000bec <main+0x344>)
 8000ac4:	6093      	str	r3, [r2, #8]
  screenMain.WidgetsNumOf = MainWidgetsNumOf;
 8000ac6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	4b47      	ldr	r3, [pc, #284]	; (8000bec <main+0x344>)
 8000ace:	819a      	strh	r2, [r3, #12]
  screenMain.ShowCallback = ScreenMainShowCb;
 8000ad0:	4b46      	ldr	r3, [pc, #280]	; (8000bec <main+0x344>)
 8000ad2:	4a4b      	ldr	r2, [pc, #300]	; (8000c00 <main+0x358>)
 8000ad4:	611a      	str	r2, [r3, #16]
  screenMain.HideCallback = NULL;
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <main+0x344>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
  struct WgtCfgMainSpeed {
    float Speed;
    UnitsSpeedT Units;
  } wgtCfgMainSpeed;

  wgtCfgMainSpeed.Speed = 0.0;
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  wgtCfgMainSpeed.Units = config.SpeedUnits;
 8000ae4:	4b47      	ldr	r3, [pc, #284]	; (8000c04 <main+0x35c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

  wgtMainSpeed.Id = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
  wgtMainSpeed.Config = &wgtCfgMainSpeed;
 8000af2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  wgtMainSpeed.InitCallback = WgtMainSpeedCb; /// EMPTY !!!!!!!!!
 8000afa:	4b43      	ldr	r3, [pc, #268]	; (8000c08 <main+0x360>)
 8000afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  //////////////////////////////////////
  /// Widget: Tacho
  omWidgetT wgtMainTacho;

  struct WgtCfgMainTacho { uint16_t Tacho; } wgtCfgMainTacho;
  wgtMainTacho.Id = 1;
 8000b00:	2301      	movs	r3, #1
 8000b02:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  wgtMainTacho.Config = &wgtCfgMainTacho;
 8000b06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
  wgtMainTacho.InitCallback = WgtMainSpeedCb; /// EMPTY !!!!!!!!!
 8000b0c:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <main+0x360>)
 8000b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  //////////////////////////////////////
  /// Widget: Volt
  omWidgetT wgtMainVolt;

  struct WgtCfgMainVolt { float Volt; } wgtCfgMainVolt;
  wgtMainVolt.Id = 2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  wgtMainVolt.Config = &wgtCfgMainVolt;
 8000b18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  wgtMainVolt.InitCallback = WgtMainSpeedCb; /// EMPTY !!!!!!!!!
 8000b1e:	4b3a      	ldr	r3, [pc, #232]	; (8000c08 <main+0x360>)
 8000b20:	66bb      	str	r3, [r7, #104]	; 0x68
  //////////////////////////////////////
  /// Widget: Odo
  omWidgetT wgtMainOdo;

  struct WgtCfgMainOdo { uint32_t Odo; } wgtCfgMainOdo;
  wgtMainOdo.Id = 3;
 8000b22:	2303      	movs	r3, #3
 8000b24:	86bb      	strh	r3, [r7, #52]	; 0x34
  wgtMainOdo.Config = &wgtCfgMainOdo;
 8000b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  wgtMainOdo.InitCallback = WgtMainSpeedCb; /// EMPTY !!!!!!!!!
 8000b2c:	4b36      	ldr	r3, [pc, #216]	; (8000c08 <main+0x360>)
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48


  mainWidgets[0] = wgtMainSpeed;
 8000b30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b34:	461d      	mov	r5, r3
 8000b36:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000b42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  mainWidgets[1] = wgtMainTacho;
 8000b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b4a:	f103 041c 	add.w	r4, r3, #28
 8000b4e:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8000b52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainWidgets[2] = wgtMainVolt;
 8000b5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b62:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8000b66:	f107 0554 	add.w	r5, r7, #84	; 0x54
 8000b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b6e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainWidgets[3] = wgtMainOdo;
 8000b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b7a:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8000b7e:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  /****************************************************************************/

  omDisplayInit(&oled1);
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <main+0x348>)
 8000b90:	f000 f9ac 	bl	8000eec <omDisplayInit>

  HAL_Delay(1000);
 8000b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b98:	f000 ff30 	bl	80019fc <HAL_Delay>

  omScreenSelect(&screenMain);
 8000b9c:	4813      	ldr	r0, [pc, #76]	; (8000bec <main+0x344>)
 8000b9e:	f000 f9b6 	bl	8000f0e <omScreenSelect>

  ssd1306_SetCursor(0, 0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fea7 	bl	80018f8 <ssd1306_SetCursor>
  ssd1306_WriteString("Test: FreeRTOS", Font_7x10, White);
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <main+0x364>)
 8000bac:	2301      	movs	r3, #1
 8000bae:	ca06      	ldmia	r2, {r1, r2}
 8000bb0:	4817      	ldr	r0, [pc, #92]	; (8000c10 <main+0x368>)
 8000bb2:	f000 fe7b 	bl	80018ac <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000bb6:	f000 fd6b 	bl	8001690 <ssd1306_UpdateScreen>
//  ssd1306_UpdateScreen();

//  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);

  BaseType_t xReturned;
  TaskHandle_t xHandle = NULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Create the task, storing the handle. */
  xReturned = xTaskCreate(
 8000bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	231c      	movs	r3, #28
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	4911      	ldr	r1, [pc, #68]	; (8000c14 <main+0x36c>)
 8000bce:	4812      	ldr	r0, [pc, #72]	; (8000c18 <main+0x370>)
 8000bd0:	f005 f852 	bl	8005c78 <xTaskCreate>
 8000bd4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    configMINIMAL_STACK_SIZE,      /* Stack size in words, not bytes. */
    ( void * ) 1,    /* Parameter passed into the task. */
    configMAX_PRIORITIES / 2,/* Priority at which the task is created. */
    &xHandle );      /* Used to pass out the created task's handle. */

  if( xReturned == pdPASS )
 8000bd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d103      	bne.n	8000be8 <main+0x340>
  {
    /* The task was created.  Use the task's handle to delete the task. */
    vTaskDelete( xHandle );
 8000be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be2:	4618      	mov	r0, r3
 8000be4:	f005 f98c 	bl	8005f00 <vTaskDelete>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <main+0x340>
 8000bea:	bf00      	nop
 8000bec:	200015dc 	.word	0x200015dc
 8000bf0:	200015f4 	.word	0x200015f4
 8000bf4:	08000d8d 	.word	0x08000d8d
 8000bf8:	20001650 	.word	0x20001650
 8000bfc:	08000d65 	.word	0x08000d65
 8000c00:	08000d79 	.word	0x08000d79
 8000c04:	20001694 	.word	0x20001694
 8000c08:	08000d51 	.word	0x08000d51
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	08006d34 	.word	0x08006d34
 8000c14:	08006d44 	.word	0x08006d44
 8000c18:	08000d3d 	.word	0x08000d3d

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0ac      	sub	sp, #176	; 0xb0
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c26:	2244      	movs	r2, #68	; 0x44
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f005 fc5b 	bl	80064e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2254      	movs	r2, #84	; 0x54
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f005 fc4d 	bl	80064e6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000c4c:	2318      	movs	r3, #24
 8000c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c62:	2360      	movs	r3, #96	; 0x60
 8000c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c7a:	2328      	movs	r3, #40	; 0x28
 8000c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c80:	2307      	movs	r3, #7
 8000c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fdbc 	bl	8002814 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ca2:	f000 f91f 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f9c7 	bl	8003054 <HAL_RCC_ClockConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ccc:	f000 f90a 	bl	8000ee4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <SystemClock_Config+0xf4>)
 8000cd2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fbeb 	bl	80034c0 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000cf0:	f000 f8f8 	bl	8000ee4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf8:	f001 fd36 	bl	8002768 <HAL_PWREx_ControlVoltageScaling>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000d02:	f000 f8ef 	bl	8000ee4 <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	37b0      	adds	r7, #176	; 0xb0
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	00020042 	.word	0x00020042

08000d14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2105      	movs	r1, #5
 8000d1c:	201c      	movs	r0, #28
 8000d1e:	f000 ff45 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d22:	201c      	movs	r0, #28
 8000d24:	f000 ff5e 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	2009      	movs	r0, #9
 8000d2e:	f000 ff3d 	bl	8001bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d32:	2009      	movs	r0, #9
 8000d34:	f000 ff56 	bl	8001be4 <HAL_NVIC_EnableIRQ>
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <vTaskCode>:

/* USER CODE BEGIN 4 */
void vTaskCode(void *pvParameters)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  return;
 8000d44:	bf00      	nop
}
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <WgtMainSpeedCb>:

void WgtMainSpeedCb(omWidgetT *wgt)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return;
 8000d58:	bf00      	nop
}
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <ScreenLogoShowCb>:

void ScreenLogoShowCb(omScreenT *screen)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <ScreenMainShowCb>:

void ScreenMainShowCb(omScreenT *screen)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  return;
 8000d80:	bf00      	nop
}
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DisplayInitCb>:
{
  return;
}

void DisplayInitCb(omDisplayT *displ)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* HAL_TIM_IC_Start_IT is not enabling HAL_TIM_PeriodElapsedCallback,
   * so we need to manually enable it. See:
   * https://community.st.com/s/question/0D50X00009hpBdlSAE/timer3-update-event-interrupt-not-working-properly
   */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d94:	2100      	movs	r1, #0
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <DisplayInitCb+0x2c>)
 8000d98:	f003 f9d8 	bl	800414c <HAL_TIM_IC_Start_IT>
  __HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <DisplayInitCb+0x2c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <DisplayInitCb+0x2c>)
 8000da2:	6812      	ldr	r2, [r2, #0]
 8000da4:	68d2      	ldr	r2, [r2, #12]
 8000da6:	f042 0201 	orr.w	r2, r2, #1
 8000daa:	60da      	str	r2, [r3, #12]

  ssd1306_Init();
 8000dac:	f000 fbe4 	bl	8001578 <ssd1306_Init>
  return;
 8000db0:	bf00      	nop
}
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000170c 	.word	0x2000170c

08000dbc <HAL_TIM_IC_CaptureCallback>:

/*
 * Callbacks for Interupts
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if (u8_RPM_State == IDLE)
 8000dc4:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10b      	bne.n	8000de6 <HAL_TIM_IC_CaptureCallback+0x2a>
  {
    u32_RPM_T1 = TIM2->CCR1;
 8000dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd4:	4a22      	ldr	r2, [pc, #136]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000dd6:	6013      	str	r3, [r2, #0]
    u16_TIM2_OVC = 0;
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	801a      	strh	r2, [r3, #0]
    u8_RPM_State = DONE;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
    sprintf(buf0, "Freq: %d", (int)u32_RPM_Freq);
//    sprintf(buf1, "Tick: %d", (int)u32_RPM_Ticks);
//    sprintf(buf2, "OVC: %d", (int)u16_TIM2_OVC);
    //dbg_print((char*)&buf0);
  }
}
 8000de4:	e036      	b.n	8000e54 <HAL_TIM_IC_CaptureCallback+0x98>
  else if (u8_RPM_State == DONE)
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d131      	bne.n	8000e54 <HAL_TIM_IC_CaptureCallback+0x98>
    u32_RPM_T2 = TIM2->CCR1;
 8000df0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000df8:	6013      	str	r3, [r2, #0]
    u32_RPM_Ticks = (u32_RPM_T2 + (u16_TIM2_OVC * 20000)) - u32_RPM_T1;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	461a      	mov	r2, r3
 8000e02:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e06:	fb03 f302 	mul.w	r3, r3, r2
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	441a      	add	r2, r3
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e1a:	6013      	str	r3, [r2, #0]
    u32_RPM_Freq = (uint32_t)(60 * ((FREQ_CLK/htim->Init.Prescaler) / u32_RPM_Ticks));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a13      	ldr	r2, [pc, #76]	; (8000e70 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000e22:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e2e:	4613      	mov	r3, r2
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	1a9b      	subs	r3, r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000e3a:	601a      	str	r2, [r3, #0]
    u8_RPM_State = IDLE;
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
    sprintf(buf0, "Freq: %d", (int)u32_RPM_Freq);
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	490a      	ldr	r1, [pc, #40]	; (8000e78 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f005 fb52 	bl	80064f8 <siprintf>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000009c 	.word	0x2000009c
 8000e60:	200000a0 	.word	0x200000a0
 8000e64:	200000ac 	.word	0x200000ac
 8000e68:	200000a4 	.word	0x200000a4
 8000e6c:	200000a8 	.word	0x200000a8
 8000e70:	04c4b400 	.word	0x04c4b400
 8000e74:	200000b0 	.word	0x200000b0
 8000e78:	08006d4c 	.word	0x08006d4c

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d102      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000e8e:	f000 fd95 	bl	80019bc <HAL_IncTick>
    else
      u16_TIM2_OVC++;
  }

  /* USER CODE END Callback 1 */
}
 8000e92:	e01a      	b.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x4e>
  else if (htim->Instance == TIM2) {
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d115      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x4e>
    if (u16_TIM2_OVC > 2)
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d909      	bls.n	8000ebc <HAL_TIM_PeriodElapsedCallback+0x40>
      u8_RPM_State = IDLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
      u16_TIM2_OVC = 0;
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	801a      	strh	r2, [r3, #0]
      u32_RPM_Freq = 0;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
}
 8000eba:	e006      	b.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x4e>
      u16_TIM2_OVC++;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000ec8:	801a      	strh	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40001000 	.word	0x40001000
 8000ed8:	200000ac 	.word	0x200000ac
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	200000b0 	.word	0x200000b0

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eea:	e7fe      	b.n	8000eea <Error_Handler+0x6>

08000eec <omDisplayInit>:

// Private methods
void _omScreenInit(omScreenT *screen);

void omDisplayInit(omDisplayT *displ)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  displ->InitCallback(displ); // OLED Driver's Init code goes here
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	4798      	blx	r3

  _omScreenInit(displ->Screen);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f824 	bl	8000f4e <_omScreenInit>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <omScreenSelect>:
  displ->DeInitCallback(displ); // OLED Driver's DeInit code goes here
}


Bool omScreenSelect(omScreenT *screen)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  if (omScreenIsActive(screen) == True)
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f84b 	bl	8000fb2 <omScreenIsActive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d101      	bne.n	8000f26 <omScreenSelect+0x18>
  {
    return False;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e00f      	b.n	8000f46 <omScreenSelect+0x38>
  }

  if (screen->Display->Screen->HideCallback != NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <omScreenSelect+0x30>
  {
    screen->Display->Screen->HideCallback(screen);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	4798      	blx	r3
  }

  _omScreenInit(screen);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f805 	bl	8000f4e <_omScreenInit>

  return True;
 8000f44:	2301      	movs	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_omScreenInit>:

void _omScreenInit(omScreenT *screen)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  if (screen->ShowCallback != NULL)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <_omScreenInit+0x18>
  {
    screen->ShowCallback(screen);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	4798      	blx	r3
  }

  for (uint16_t i = 0; i < screen->WidgetsNumOf; i++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	81fb      	strh	r3, [r7, #14]
 8000f6a:	e015      	b.n	8000f98 <_omScreenInit+0x4a>
  {
    // https://stackoverflow.com/questions/16201607/c-pointer-to-array-of-structs
    screen->Widgets[i].InitCallback(screen->Widgets + i);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6899      	ldr	r1, [r3, #8]
 8000f70:	89fa      	ldrh	r2, [r7, #14]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	6959      	ldr	r1, [r3, #20]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6898      	ldr	r0, [r3, #8]
 8000f82:	89fa      	ldrh	r2, [r7, #14]
 8000f84:	4613      	mov	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	1a9b      	subs	r3, r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4403      	add	r3, r0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	4788      	blx	r1
  for (uint16_t i = 0; i < screen->WidgetsNumOf; i++)
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	3301      	adds	r3, #1
 8000f96:	81fb      	strh	r3, [r7, #14]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	899b      	ldrh	r3, [r3, #12]
 8000f9c:	89fa      	ldrh	r2, [r7, #14]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d3e4      	bcc.n	8000f6c <_omScreenInit+0x1e>
  }

  screen->Display->Screen = screen;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]
}
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <omScreenIsActive>:


Bool omScreenIsActive(omScreenT *screen)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  return (screen->Display->Screen->Id == screen->Id) ? True : False;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	bf0c      	ite	eq
 8000fca:	2301      	moveq	r3, #1
 8000fcc:	2300      	movne	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ff4:	4b25      	ldr	r3, [pc, #148]	; (800108c <MX_RTC_Init+0xb0>)
 8000ff6:	4a26      	ldr	r2, [pc, #152]	; (8001090 <MX_RTC_Init+0xb4>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_RTC_Init+0xb0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001000:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_RTC_Init+0xb0>)
 8001002:	227f      	movs	r2, #127	; 0x7f
 8001004:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_RTC_Init+0xb0>)
 8001008:	22ff      	movs	r2, #255	; 0xff
 800100a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_RTC_Init+0xb0>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_RTC_Init+0xb0>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_RTC_Init+0xb0>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800101e:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_RTC_Init+0xb0>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001024:	4819      	ldr	r0, [pc, #100]	; (800108c <MX_RTC_Init+0xb0>)
 8001026:	f002 fd2d 	bl	8003a84 <HAL_RTC_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001030:	f7ff ff58 	bl	8000ee4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001034:	2300      	movs	r3, #0
 8001036:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001038:	2300      	movs	r3, #0
 800103a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800103c:	2300      	movs	r3, #0
 800103e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2201      	movs	r2, #1
 800104c:	4619      	mov	r1, r3
 800104e:	480f      	ldr	r0, [pc, #60]	; (800108c <MX_RTC_Init+0xb0>)
 8001050:	f002 fd93 	bl	8003b7a <HAL_RTC_SetTime>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800105a:	f7ff ff43 	bl	8000ee4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800105e:	2301      	movs	r3, #1
 8001060:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001062:	2301      	movs	r3, #1
 8001064:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001066:	2301      	movs	r3, #1
 8001068:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800106a:	2300      	movs	r3, #0
 800106c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	2201      	movs	r2, #1
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_RTC_Init+0xb0>)
 8001076:	f002 fe1d 	bl	8003cb4 <HAL_RTC_SetDate>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001080:	f7ff ff30 	bl	8000ee4 <Error_Handler>
  }

}
 8001084:	bf00      	nop
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	2000169c 	.word	0x2000169c
 8001090:	40002800 	.word	0x40002800

08001094 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_RTC_MspInit+0x30>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d107      	bne.n	80010b6 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_RTC_MspInit+0x34>)
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <HAL_RTC_MspInit+0x34>)
 80010aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40002800 	.word	0x40002800
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_MspInit+0x4c>)
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_MspInit+0x4c>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_MspInit+0x4c>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ea:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_MspInit+0x4c>)
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_MspInit+0x4c>)
 80010ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f4:	6593      	str	r3, [r2, #88]	; 0x58
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_MspInit+0x4c>)
 80010f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	210f      	movs	r1, #15
 8001106:	f06f 0001 	mvn.w	r0, #1
 800110a:	f000 fd4f 	bl	8001bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f000 fd3b 	bl	8001bac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001136:	2036      	movs	r0, #54	; 0x36
 8001138:	f000 fd54 	bl	8001be4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800113c:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <HAL_InitTick+0x9c>)
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <HAL_InitTick+0x9c>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6593      	str	r3, [r2, #88]	; 0x58
 8001148:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_InitTick+0x9c>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001154:	f107 0210 	add.w	r2, r7, #16
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f002 f91c 	bl	800339c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001164:	f002 f8ee 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8001168:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <HAL_InitTick+0xa0>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3b01      	subs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_InitTick+0xa4>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <HAL_InitTick+0xa8>)
 800117c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_InitTick+0xa4>)
 8001180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_InitTick+0xa4>)
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_InitTick+0xa4>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_InitTick+0xa4>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <HAL_InitTick+0xa4>)
 800119a:	f002 fec9 	bl	8003f30 <HAL_TIM_Base_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d104      	bne.n	80011ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011a4:	4806      	ldr	r0, [pc, #24]	; (80011c0 <HAL_InitTick+0xa4>)
 80011a6:	f002 ff1b 	bl	8003fe0 <HAL_TIM_Base_Start_IT>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3730      	adds	r7, #48	; 0x30
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	200016c0 	.word	0x200016c0
 80011c4:	40001000 	.word	0x40001000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler+0x4>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011f8:	2008      	movs	r0, #8
 80011fa:	f000 fe83 	bl	8001f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM2_IRQHandler+0x10>)
 800120a:	f003 f8c5 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000170c 	.word	0x2000170c

08001218 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <TIM6_DAC_IRQHandler+0x10>)
 800121e:	f003 f8bb 	bl	8004398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200016c0 	.word	0x200016c0

0800122c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <MX_TIM2_Init+0xe0>)
 800125a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800125e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_TIM2_Init+0xe0>)
 8001262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_TIM2_Init+0xe0>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_TIM2_Init+0xe0>)
 8001270:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_TIM2_Init+0xe0>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800127c:	4b23      	ldr	r3, [pc, #140]	; (800130c <MX_TIM2_Init+0xe0>)
 800127e:	2280      	movs	r2, #128	; 0x80
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <MX_TIM2_Init+0xe0>)
 8001284:	f002 fe54 	bl	8003f30 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800128e:	f7ff fe29 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001296:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	4619      	mov	r1, r3
 800129e:	481b      	ldr	r0, [pc, #108]	; (800130c <MX_TIM2_Init+0xe0>)
 80012a0:	f003 fa2d 	bl	80046fe <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80012aa:	f7ff fe1b 	bl	8000ee4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012ae:	4817      	ldr	r0, [pc, #92]	; (800130c <MX_TIM2_Init+0xe0>)
 80012b0:	f002 feea 	bl	8004088 <HAL_TIM_IC_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012ba:	f7ff fe13 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480f      	ldr	r0, [pc, #60]	; (800130c <MX_TIM2_Init+0xe0>)
 80012ce:	f003 fd1d 	bl	8004d0c <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80012d8:	f7ff fe04 	bl	8000ee4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80012dc:	2302      	movs	r3, #2
 80012de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	4806      	ldr	r0, [pc, #24]	; (800130c <MX_TIM2_Init+0xe0>)
 80012f4:	f003 f96f 	bl	80045d6 <HAL_TIM_IC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012fe:	f7ff fdf1 	bl	8000ee4 <Error_Handler>
  }

}
 8001302:	bf00      	nop
 8001304:	3730      	adds	r7, #48	; 0x30
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000170c 	.word	0x2000170c

08001310 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d128      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4a16      	ldr	r2, [pc, #88]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 8001336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_TIM_Base_MspInit+0x7c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = HALL_SPEED_Pin;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HALL_SPEED_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f000 fc3e 	bl	8001c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	; 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000

08001390 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 8001396:	4a15      	ldr	r2, [pc, #84]	; (80013ec <MX_USART2_UART_Init+0x5c>)
 8001398:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139a:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 800139c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013b6:	220c      	movs	r2, #12
 80013b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_USART2_UART_Init+0x58>)
 80013d4:	f003 fd1e 	bl	8004e14 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013de:	f7ff fd81 	bl	8000ee4 <Error_Handler>
  }

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20001758 	.word	0x20001758
 80013ec:	40004400 	.word	0x40004400

080013f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a20      	ldr	r2, [pc, #128]	; (8001490 <HAL_UART_MspInit+0xa0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d13a      	bne.n	8001488 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_UART_MspInit+0xa4>)
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_UART_MspInit+0xa4>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UART_MspInit+0xa4>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <HAL_UART_MspInit+0xa4>)
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_UART_MspInit+0xa4>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_UART_MspInit+0xa4>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001442:	2304      	movs	r3, #4
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001452:	2307      	movs	r3, #7
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f000 fbce 	bl	8001c00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001476:	2303      	movs	r3, #3
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f000 fbbc 	bl	8001c00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40004400 	.word	0x40004400
 8001494:	40021000 	.word	0x40021000

08001498 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800149c:	4a17      	ldr	r2, [pc, #92]	; (80014fc <SystemInit+0x64>)
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <SystemInit+0x64>)
 80014a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <SystemInit+0x68>)
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <SystemInit+0x68>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <SystemInit+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <SystemInit+0x68>)
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <SystemInit+0x68>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <SystemInit+0x68>)
 80014d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SystemInit+0x68>)
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <SystemInit+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <SystemInit+0x68>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SystemInit+0x64>)
 80014ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ee:	609a      	str	r2, [r3, #8]
#endif
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00
 8001500:	40021000 	.word	0x40021000

08001504 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af04      	add	r7, sp, #16
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	2200      	movs	r2, #0
 8001530:	2178      	movs	r1, #120	; 0x78
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <ssd1306_WriteCommand+0x2c>)
 8001534:	f000 fd98 	bl	8002068 <HAL_I2C_Mem_Write>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20001590 	.word	0x20001590

08001544 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af04      	add	r7, sp, #16
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001556:	9202      	str	r2, [sp, #8]
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	2178      	movs	r1, #120	; 0x78
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <ssd1306_WriteData+0x30>)
 8001566:	f000 fd7f 	bl	8002068 <HAL_I2C_Mem_Write>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20001590 	.word	0x20001590

08001578 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800157c:	f7ff ffc2 	bl	8001504 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001580:	2064      	movs	r0, #100	; 0x64
 8001582:	f000 fa3b 	bl	80019fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001586:	2000      	movs	r0, #0
 8001588:	f000 f9e2 	bl	8001950 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800158c:	2020      	movs	r0, #32
 800158e:	f7ff ffc1 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff ffbe 	bl	8001514 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001598:	20b0      	movs	r0, #176	; 0xb0
 800159a:	f7ff ffbb 	bl	8001514 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800159e:	20c8      	movs	r0, #200	; 0xc8
 80015a0:	f7ff ffb8 	bl	8001514 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff ffb5 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80015aa:	2010      	movs	r0, #16
 80015ac:	f7ff ffb2 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015b0:	2040      	movs	r0, #64	; 0x40
 80015b2:	f7ff ffaf 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015b6:	20ff      	movs	r0, #255	; 0xff
 80015b8:	f000 f9b6 	bl	8001928 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015bc:	20a1      	movs	r0, #161	; 0xa1
 80015be:	f7ff ffa9 	bl	8001514 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015c2:	20a6      	movs	r0, #166	; 0xa6
 80015c4:	f7ff ffa6 	bl	8001514 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80015c8:	20a8      	movs	r0, #168	; 0xa8
 80015ca:	f7ff ffa3 	bl	8001514 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80015ce:	203f      	movs	r0, #63	; 0x3f
 80015d0:	f7ff ffa0 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015d4:	20a4      	movs	r0, #164	; 0xa4
 80015d6:	f7ff ff9d 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015da:	20d3      	movs	r0, #211	; 0xd3
 80015dc:	f7ff ff9a 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff ff97 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015e6:	20d5      	movs	r0, #213	; 0xd5
 80015e8:	f7ff ff94 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015ec:	20f0      	movs	r0, #240	; 0xf0
 80015ee:	f7ff ff91 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015f2:	20d9      	movs	r0, #217	; 0xd9
 80015f4:	f7ff ff8e 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015f8:	2022      	movs	r0, #34	; 0x22
 80015fa:	f7ff ff8b 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015fe:	20da      	movs	r0, #218	; 0xda
 8001600:	f7ff ff88 	bl	8001514 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001604:	2012      	movs	r0, #18
 8001606:	f7ff ff85 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800160a:	20db      	movs	r0, #219	; 0xdb
 800160c:	f7ff ff82 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001610:	2020      	movs	r0, #32
 8001612:	f7ff ff7f 	bl	8001514 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001616:	208d      	movs	r0, #141	; 0x8d
 8001618:	f7ff ff7c 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800161c:	2014      	movs	r0, #20
 800161e:	f7ff ff79 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001622:	2001      	movs	r0, #1
 8001624:	f000 f994 	bl	8001950 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001628:	2000      	movs	r0, #0
 800162a:	f000 f80f 	bl	800164c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800162e:	f000 f82f 	bl	8001690 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <ssd1306_Init+0xd0>)
 8001634:	2200      	movs	r2, #0
 8001636:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <ssd1306_Init+0xd0>)
 800163a:	2200      	movs	r2, #0
 800163c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800163e:	4b02      	ldr	r3, [pc, #8]	; (8001648 <ssd1306_Init+0xd0>)
 8001640:	2201      	movs	r2, #1
 8001642:	715a      	strb	r2, [r3, #5]
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200004b4 	.word	0x200004b4

0800164c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e00d      	b.n	8001678 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <ssd1306_Fill+0x1a>
 8001662:	2100      	movs	r1, #0
 8001664:	e000      	b.n	8001668 <ssd1306_Fill+0x1c>
 8001666:	21ff      	movs	r1, #255	; 0xff
 8001668:	4a08      	ldr	r2, [pc, #32]	; (800168c <ssd1306_Fill+0x40>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	460a      	mov	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3301      	adds	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d3ed      	bcc.n	800165c <ssd1306_Fill+0x10>
    }
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	200000b4 	.word	0x200000b4

08001690 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e016      	b.n	80016ca <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	3b50      	subs	r3, #80	; 0x50
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff36 	bl	8001514 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff ff33 	bl	8001514 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80016ae:	2010      	movs	r0, #16
 80016b0:	f7ff ff30 	bl	8001514 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <ssd1306_UpdateScreen+0x48>)
 80016ba:	4413      	add	r3, r2
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff40 	bl	8001544 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	3301      	adds	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b07      	cmp	r3, #7
 80016ce:	d9e5      	bls.n	800169c <ssd1306_UpdateScreen+0xc>
    }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200000b4 	.word	0x200000b4

080016dc <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db48      	blt.n	8001788 <ssd1306_DrawPixel+0xac>
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	2b3f      	cmp	r3, #63	; 0x3f
 80016fa:	d845      	bhi.n	8001788 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <ssd1306_DrawPixel+0xb8>)
 80016fe:	791b      	ldrb	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d006      	beq.n	8001712 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001704:	797b      	ldrb	r3, [r7, #5]
 8001706:	2b00      	cmp	r3, #0
 8001708:	bf0c      	ite	eq
 800170a:	2301      	moveq	r3, #1
 800170c:	2300      	movne	r3, #0
 800170e:	b2db      	uxtb	r3, r3
 8001710:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001712:	797b      	ldrb	r3, [r7, #5]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d11a      	bne.n	800174e <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001718:	79fa      	ldrb	r2, [r7, #7]
 800171a:	79bb      	ldrb	r3, [r7, #6]
 800171c:	08db      	lsrs	r3, r3, #3
 800171e:	b2d8      	uxtb	r0, r3
 8001720:	4603      	mov	r3, r0
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	4413      	add	r3, r2
 8001726:	79f9      	ldrb	r1, [r7, #7]
 8001728:	4602      	mov	r2, r0
 800172a:	01d2      	lsls	r2, r2, #7
 800172c:	440a      	add	r2, r1
 800172e:	491a      	ldr	r1, [pc, #104]	; (8001798 <ssd1306_DrawPixel+0xbc>)
 8001730:	5c8a      	ldrb	r2, [r1, r2]
 8001732:	b251      	sxtb	r1, r2
 8001734:	79ba      	ldrb	r2, [r7, #6]
 8001736:	f002 0207 	and.w	r2, r2, #7
 800173a:	2001      	movs	r0, #1
 800173c:	fa00 f202 	lsl.w	r2, r0, r2
 8001740:	b252      	sxtb	r2, r2
 8001742:	430a      	orrs	r2, r1
 8001744:	b252      	sxtb	r2, r2
 8001746:	b2d1      	uxtb	r1, r2
 8001748:	4a13      	ldr	r2, [pc, #76]	; (8001798 <ssd1306_DrawPixel+0xbc>)
 800174a:	54d1      	strb	r1, [r2, r3]
 800174c:	e01d      	b.n	800178a <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800174e:	79fa      	ldrb	r2, [r7, #7]
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	b2d8      	uxtb	r0, r3
 8001756:	4603      	mov	r3, r0
 8001758:	01db      	lsls	r3, r3, #7
 800175a:	4413      	add	r3, r2
 800175c:	79f9      	ldrb	r1, [r7, #7]
 800175e:	4602      	mov	r2, r0
 8001760:	01d2      	lsls	r2, r2, #7
 8001762:	440a      	add	r2, r1
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <ssd1306_DrawPixel+0xbc>)
 8001766:	5c8a      	ldrb	r2, [r1, r2]
 8001768:	b251      	sxtb	r1, r2
 800176a:	79ba      	ldrb	r2, [r7, #6]
 800176c:	f002 0207 	and.w	r2, r2, #7
 8001770:	2001      	movs	r0, #1
 8001772:	fa00 f202 	lsl.w	r2, r0, r2
 8001776:	b252      	sxtb	r2, r2
 8001778:	43d2      	mvns	r2, r2
 800177a:	b252      	sxtb	r2, r2
 800177c:	400a      	ands	r2, r1
 800177e:	b252      	sxtb	r2, r2
 8001780:	b2d1      	uxtb	r1, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <ssd1306_DrawPixel+0xbc>)
 8001784:	54d1      	strb	r1, [r2, r3]
 8001786:	e000      	b.n	800178a <ssd1306_DrawPixel+0xae>
        return;
 8001788:	bf00      	nop
    }
}
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	200004b4 	.word	0x200004b4
 8001798:	200000b4 	.word	0x200000b4

0800179c <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	1d38      	adds	r0, r7, #4
 80017a6:	e880 0006 	stmia.w	r0, {r1, r2}
 80017aa:	461a      	mov	r2, r3
 80017ac:	4623      	mov	r3, r4
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	4613      	mov	r3, r2
 80017b2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b1f      	cmp	r3, #31
 80017b8:	d902      	bls.n	80017c0 <ssd1306_WriteChar+0x24>
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b7e      	cmp	r3, #126	; 0x7e
 80017be:	d901      	bls.n	80017c4 <ssd1306_WriteChar+0x28>
        return 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e06d      	b.n	80018a0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017c4:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	793b      	ldrb	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	2b80      	cmp	r3, #128	; 0x80
 80017d0:	dc06      	bgt.n	80017e0 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017d2:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 80017d4:	885b      	ldrh	r3, [r3, #2]
 80017d6:	461a      	mov	r2, r3
 80017d8:	797b      	ldrb	r3, [r7, #5]
 80017da:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017dc:	2b40      	cmp	r3, #64	; 0x40
 80017de:	dd01      	ble.n	80017e4 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e05d      	b.n	80018a0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e04c      	b.n	8001884 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	3b20      	subs	r3, #32
 80017f0:	7979      	ldrb	r1, [r7, #5]
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	440b      	add	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
 8001808:	e034      	b.n	8001874 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4413      	add	r3, r2
 8001826:	b2d8      	uxtb	r0, r3
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 800182a:	885b      	ldrh	r3, [r3, #2]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	4413      	add	r3, r2
 8001834:	b2db      	uxtb	r3, r3
 8001836:	7bba      	ldrb	r2, [r7, #14]
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff ff4f 	bl	80016dc <ssd1306_DrawPixel>
 800183e:	e016      	b.n	800186e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4413      	add	r3, r2
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 8001850:	885b      	ldrh	r3, [r3, #2]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	4413      	add	r3, r2
 800185a:	b2d9      	uxtb	r1, r3
 800185c:	7bbb      	ldrb	r3, [r7, #14]
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	f7ff ff37 	bl	80016dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	3301      	adds	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	793b      	ldrb	r3, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	429a      	cmp	r2, r3
 800187c:	d8c5      	bhi.n	800180a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	797b      	ldrb	r3, [r7, #5]
 8001886:	461a      	mov	r2, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	429a      	cmp	r2, r3
 800188c:	d8ad      	bhi.n	80017ea <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 8001890:	881a      	ldrh	r2, [r3, #0]
 8001892:	793b      	ldrb	r3, [r7, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4413      	add	r3, r2
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <ssd1306_WriteChar+0x10c>)
 800189c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3724      	adds	r7, #36	; 0x24
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd90      	pop	{r4, r7, pc}
 80018a8:	200004b4 	.word	0x200004b4

080018ac <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	1d38      	adds	r0, r7, #4
 80018b6:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ba:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80018bc:	e012      	b.n	80018e4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	7818      	ldrb	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	1d3a      	adds	r2, r7, #4
 80018c6:	ca06      	ldmia	r2, {r1, r2}
 80018c8:	f7ff ff68 	bl	800179c <ssd1306_WriteChar>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d002      	beq.n	80018de <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	e008      	b.n	80018f0 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1e8      	bne.n	80018be <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <ssd1306_SetCursor+0x2c>)
 800190e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001910:	79bb      	ldrb	r3, [r7, #6]
 8001912:	b29a      	uxth	r2, r3
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <ssd1306_SetCursor+0x2c>)
 8001916:	805a      	strh	r2, [r3, #2]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	200004b4 	.word	0x200004b4

08001928 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001932:	2381      	movs	r3, #129	; 0x81
 8001934:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fdeb 	bl	8001514 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fde7 	bl	8001514 <ssd1306_WriteCommand>
}
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001960:	23af      	movs	r3, #175	; 0xaf
 8001962:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <ssd1306_SetDisplayOn+0x38>)
 8001966:	2201      	movs	r2, #1
 8001968:	719a      	strb	r2, [r3, #6]
 800196a:	e004      	b.n	8001976 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800196c:	23ae      	movs	r3, #174	; 0xae
 800196e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <ssd1306_SetDisplayOn+0x38>)
 8001972:	2200      	movs	r2, #0
 8001974:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fdcb 	bl	8001514 <ssd1306_WriteCommand>
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200004b4 	.word	0x200004b4

0800198c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001996:	2003      	movs	r0, #3
 8001998:	f000 f8fd 	bl	8001b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fbbd 	bl	800111c <HAL_InitTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d002      	beq.n	80019ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	71fb      	strb	r3, [r7, #7]
 80019ac:	e001      	b.n	80019b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ae:	f7ff fb8d 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019b2:	79fb      	ldrb	r3, [r7, #7]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000010 	.word	0x20000010
 80019e0:	200017d8 	.word	0x200017d8

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	200017d8 	.word	0x200017d8

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_Delay+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad2      	subs	r2, r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3f7      	bcc.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000010 	.word	0x20000010

08001a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a72:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <__NVIC_SetPriorityGrouping+0x44>)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	60d3      	str	r3, [r2, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	f003 0307 	and.w	r3, r3, #7
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db0b      	blt.n	8001ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab6:	4909      	ldr	r1, [pc, #36]	; (8001adc <__NVIC_EnableIRQ+0x38>)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	79fa      	ldrb	r2, [r7, #7]
 8001ac0:	f002 021f 	and.w	r2, r2, #31
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000e100 	.word	0xe000e100

08001ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	6039      	str	r1, [r7, #0]
 8001aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db0a      	blt.n	8001b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af4:	490d      	ldr	r1, [pc, #52]	; (8001b2c <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	0112      	lsls	r2, r2, #4
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	440b      	add	r3, r1
 8001b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b08:	e00a      	b.n	8001b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0a:	4909      	ldr	r1, [pc, #36]	; (8001b30 <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	0112      	lsls	r2, r2, #4
 8001b1a:	b2d2      	uxtb	r2, r2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	761a      	strb	r2, [r3, #24]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f1c3 0307 	rsb	r3, r3, #7
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	bf28      	it	cs
 8001b52:	2304      	movcs	r3, #4
 8001b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d902      	bls.n	8001b64 <NVIC_EncodePriority+0x30>
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3b03      	subs	r3, #3
 8001b62:	e000      	b.n	8001b66 <NVIC_EncodePriority+0x32>
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	1e5a      	subs	r2, r3, #1
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	401a      	ands	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	1e59      	subs	r1, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff4e 	bl	8001a40 <__NVIC_SetPriorityGrouping>
}
 8001ba4:	bf00      	nop
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbe:	f7ff ff63 	bl	8001a88 <__NVIC_GetPriorityGrouping>
 8001bc2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	6978      	ldr	r0, [r7, #20]
 8001bca:	f7ff ffb3 	bl	8001b34 <NVIC_EncodePriority>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff ff82 	bl	8001ae0 <__NVIC_SetPriority>
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ff56 	bl	8001aa4 <__NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0e:	e148      	b.n	8001ea2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2101      	movs	r1, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 813a 	beq.w	8001e9c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d00b      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d007      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3c:	2b11      	cmp	r3, #17
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0xea>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d123      	bne.n	8001d32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	08da      	lsrs	r2, r3, #3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3208      	adds	r2, #8
 8001cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	6939      	ldr	r1, [r7, #16]
 8001d2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0203 	and.w	r2, r3, #3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8094 	beq.w	8001e9c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d76:	4b52      	ldr	r3, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001d80:	4b4f      	ldr	r3, [pc, #316]	; (8001ec0 <HAL_GPIO_Init+0x2c0>)
 8001d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1d4>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_GPIO_Init+0x2c8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1d0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_GPIO_Init+0x2cc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1cc>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dcc:	2307      	movs	r3, #7
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1d6>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001de6:	4937      	ldr	r1, [pc, #220]	; (8001ec4 <HAL_GPIO_Init+0x2c4>)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e18:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e42:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e6c:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e96:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <HAL_GPIO_Init+0x2d0>)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aeaf 	bne.w	8001c10 <HAL_GPIO_Init+0x10>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	371c      	adds	r7, #28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f1a:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f806 	bl	8001f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e080      	b.n	800205e <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fc37 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2224      	movs	r2, #36	; 0x24
 8001f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6852      	ldr	r2, [r2, #4]
 8001f96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	6892      	ldr	r2, [r2, #8]
 8001fa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001faa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d107      	bne.n	8001fc4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6892      	ldr	r2, [r2, #8]
 8001fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	e006      	b.n	8001fd2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6892      	ldr	r2, [r2, #8]
 8001fcc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d104      	bne.n	8001fe4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	68d2      	ldr	r2, [r2, #12]
 8002002:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002006:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6911      	ldr	r1, [r2, #16]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6952      	ldr	r2, [r2, #20]
 8002014:	4311      	orrs	r1, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6992      	ldr	r2, [r2, #24]
 800201a:	0212      	lsls	r2, r2, #8
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	69d1      	ldr	r1, [r2, #28]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6a12      	ldr	r2, [r2, #32]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	817b      	strh	r3, [r7, #10]
 800207a:	460b      	mov	r3, r1
 800207c:	813b      	strh	r3, [r7, #8]
 800207e:	4613      	mov	r3, r2
 8002080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b20      	cmp	r3, #32
 800208c:	f040 80f9 	bne.w	8002282 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <HAL_I2C_Mem_Write+0x34>
 8002096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0ed      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x4e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0e6      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020be:	f7ff fc91 	bl	80019e4 <HAL_GetTick>
 80020c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2319      	movs	r3, #25
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 f955 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e0d1      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2221      	movs	r2, #33	; 0x21
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002108:	88f8      	ldrh	r0, [r7, #6]
 800210a:	893a      	ldrh	r2, [r7, #8]
 800210c:	8979      	ldrh	r1, [r7, #10]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	4603      	mov	r3, r0
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f8b9 	bl	8002290 <I2C_RequestMemoryWrite>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0a9      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29b      	uxth	r3, r3
 8002136:	2bff      	cmp	r3, #255	; 0xff
 8002138:	d90e      	bls.n	8002158 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	22ff      	movs	r2, #255	; 0xff
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	b2da      	uxtb	r2, r3
 8002146:	8979      	ldrh	r1, [r7, #10]
 8002148:	2300      	movs	r3, #0
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fa37 	bl	80025c4 <I2C_TransferConfig>
 8002156:	e00f      	b.n	8002178 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002166:	b2da      	uxtb	r2, r3
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	2300      	movs	r3, #0
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fa26 	bl	80025c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f93f 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e07b      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d034      	beq.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f8d1 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04d      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2bff      	cmp	r3, #255	; 0xff
 80021f0:	d90e      	bls.n	8002210 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	22ff      	movs	r2, #255	; 0xff
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	8979      	ldrh	r1, [r7, #10]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 f9db 	bl	80025c4 <I2C_TransferConfig>
 800220e:	e00f      	b.n	8002230 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221e:	b2da      	uxtb	r2, r3
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f9ca 	bl	80025c4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002234:	b29b      	uxth	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d19e      	bne.n	8002178 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f91e 	bl	8002480 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e01a      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2220      	movs	r2, #32
 8002254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6859      	ldr	r1, [r3, #4]
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_I2C_Mem_Write+0x224>)
 8002262:	400b      	ands	r3, r1
 8002264:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002282:	2302      	movs	r3, #2
  }
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	fe00e800 	.word	0xfe00e800

08002290 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	4608      	mov	r0, r1
 800229a:	4611      	mov	r1, r2
 800229c:	461a      	mov	r2, r3
 800229e:	4603      	mov	r3, r0
 80022a0:	817b      	strh	r3, [r7, #10]
 80022a2:	460b      	mov	r3, r1
 80022a4:	813b      	strh	r3, [r7, #8]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	8979      	ldrh	r1, [r7, #10]
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <I2C_RequestMemoryWrite+0xa4>)
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 f983 	bl	80025c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	69b9      	ldr	r1, [r7, #24]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f89c 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e02c      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
 80022e2:	e015      	b.n	8002310 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	893a      	ldrh	r2, [r7, #8]
 80022ea:	0a12      	lsrs	r2, r2, #8
 80022ec:	b292      	uxth	r2, r2
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	69b9      	ldr	r1, [r7, #24]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f882 	bl	8002400 <I2C_WaitOnTXISFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e012      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	893a      	ldrh	r2, [r7, #8]
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f830 	bl	8002380 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	80002000 	.word	0x80002000

08002338 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d103      	bne.n	8002356 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d007      	beq.n	8002374 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	6992      	ldr	r2, [r2, #24]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	619a      	str	r2, [r3, #24]
  }
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002390:	e022      	b.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002398:	d01e      	beq.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239a:	f7ff fb23 	bl	80019e4 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad2      	subs	r2, r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d802      	bhi.n	80023b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d113      	bne.n	80023d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00f      	b.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699a      	ldr	r2, [r3, #24]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	401a      	ands	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d0cd      	beq.n	8002392 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800240c:	e02c      	b.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f870 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02a      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002428:	d01e      	beq.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7ff fadb 	bl	80019e4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad2      	subs	r2, r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d802      	bhi.n	8002440 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d113      	bne.n	8002468 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e007      	b.n	8002478 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b02      	cmp	r3, #2
 8002474:	d1cb      	bne.n	800240e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800248c:	e028      	b.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f830 	bl	80024f8 <I2C_IsAcknowledgeFailed>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e026      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff fa9f 	bl	80019e4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	1ad2      	subs	r2, r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d802      	bhi.n	80024b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e007      	b.n	80024f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b20      	cmp	r3, #32
 80024ec:	d1cf      	bne.n	800248e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d151      	bne.n	80025b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002512:	e022      	b.n	800255a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800251a:	d01e      	beq.n	800255a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251c:	f7ff fa62 	bl	80019e4 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	1ad2      	subs	r2, r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	429a      	cmp	r2, r3
 800252a:	d802      	bhi.n	8002532 <I2C_IsAcknowledgeFailed+0x3a>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d113      	bne.n	800255a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e02e      	b.n	80025b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b20      	cmp	r3, #32
 8002566:	d1d5      	bne.n	8002514 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2210      	movs	r2, #16
 800256e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2220      	movs	r2, #32
 8002576:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fedd 	bl	8002338 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6859      	ldr	r1, [r3, #4]
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800258a:	400b      	ands	r3, r1
 800258c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0204 	orr.w	r2, r3, #4
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	fe00e800 	.word	0xfe00e800

080025c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607b      	str	r3, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	4613      	mov	r3, r2
 80025d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	0d5b      	lsrs	r3, r3, #21
 80025e4:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <I2C_TransferConfig+0x54>)
 80025ea:	4303      	orrs	r3, r0
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4019      	ands	r1, r3
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80025f6:	7a7b      	ldrb	r3, [r7, #9]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025fe:	4318      	orrs	r0, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4318      	orrs	r0, r3
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	4303      	orrs	r3, r0
 8002608:	430b      	orrs	r3, r1
 800260a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	03ff63ff 	.word	0x03ff63ff

0800261c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b20      	cmp	r3, #32
 8002630:	d138      	bne.n	80026a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800263c:	2302      	movs	r3, #2
 800263e:	e032      	b.n	80026a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6812      	ldr	r2, [r2, #0]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800266e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	6811      	ldr	r1, [r2, #0]
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e000      	b.n	80026a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a4:	2302      	movs	r3, #2
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b085      	sub	sp, #20
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d139      	bne.n	800273c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e033      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2224      	movs	r2, #36	; 0x24
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f042 0201 	orr.w	r2, r2, #1
 8002726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <HAL_PWREx_GetVoltageRange+0x18>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40007000 	.word	0x40007000

08002768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002776:	d130      	bne.n	80027da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002784:	d038      	beq.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002786:	4a20      	ldr	r2, [pc, #128]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002788:	4b1f      	ldr	r3, [pc, #124]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002790:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2232      	movs	r2, #50	; 0x32
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027a2:	fba2 2303 	umull	r2, r3, r2, r3
 80027a6:	0c9b      	lsrs	r3, r3, #18
 80027a8:	3301      	adds	r3, #1
 80027aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ac:	e002      	b.n	80027b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c0:	d102      	bne.n	80027c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f2      	bne.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d4:	d110      	bne.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e00f      	b.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e6:	d007      	beq.n	80027f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40007000 	.word	0x40007000
 800280c:	20000000 	.word	0x20000000
 8002810:	431bde83 	.word	0x431bde83

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d102      	bne.n	8002828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f000 bc11 	b.w	800304a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002828:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002832:	4b9e      	ldr	r3, [pc, #632]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80e4 	beq.w	8002a12 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <HAL_RCC_OscConfig+0x4c>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b0c      	cmp	r3, #12
 8002854:	f040 808b 	bne.w	800296e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b01      	cmp	r3, #1
 800285c:	f040 8087 	bne.w	800296e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002860:	4b92      	ldr	r3, [pc, #584]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_OscConfig+0x64>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e3e8      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1a      	ldr	r2, [r3, #32]
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_RCC_OscConfig+0x7e>
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002890:	e005      	b.n	800289e <HAL_RCC_OscConfig+0x8a>
 8002892:	4b86      	ldr	r3, [pc, #536]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289e:	429a      	cmp	r2, r3
 80028a0:	d923      	bls.n	80028ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fdaa 	bl	8003400 <RCC_SetFlashLatencyFromMSIRange>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e3c9      	b.n	800304a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b6:	4a7d      	ldr	r2, [pc, #500]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028b8:	4b7c      	ldr	r3, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	497a      	ldr	r1, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d4:	4975      	ldr	r1, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028d6:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
 80028e8:	e025      	b.n	8002936 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ea:	4a70      	ldr	r2, [pc, #448]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	496d      	ldr	r1, [pc, #436]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028f8:	4b6c      	ldr	r3, [pc, #432]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002908:	4968      	ldr	r1, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800290a:	4b68      	ldr	r3, [pc, #416]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fd6a 	bl	8003400 <RCC_SetFlashLatencyFromMSIRange>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e389      	b.n	800304a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002936:	f000 fc6f 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	4a5a      	ldr	r2, [pc, #360]	; (8002ab0 <HAL_RCC_OscConfig+0x29c>)
 8002948:	5cd3      	ldrb	r3, [r2, r3]
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	fa21 f303 	lsr.w	r3, r1, r3
 8002952:	4a58      	ldr	r2, [pc, #352]	; (8002ab4 <HAL_RCC_OscConfig+0x2a0>)
 8002954:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002956:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_RCC_OscConfig+0x2a4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fbde 	bl	800111c <HAL_InitTick>
 8002960:	4603      	mov	r3, r0
 8002962:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d052      	beq.n	8002a10 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	e36d      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d032      	beq.n	80029dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002976:	4a4d      	ldr	r2, [pc, #308]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002982:	f7ff f82f 	bl	80019e4 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800298a:	f7ff f82b 	bl	80019e4 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e356      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800299c:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a8:	4a40      	ldr	r2, [pc, #256]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	493d      	ldr	r1, [pc, #244]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029b6:	4b3d      	ldr	r3, [pc, #244]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c6:	4939      	ldr	r1, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
 80029da:	e01a      	b.n	8002a12 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029dc:	4a33      	ldr	r2, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029de:	4b33      	ldr	r3, [pc, #204]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fffc 	bl	80019e4 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029f0:	f7fe fff8 	bl	80019e4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e323      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1dc>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d073      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x21c>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d10e      	bne.n	8002a48 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d10b      	bne.n	8002a48 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d063      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d15f      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e300      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x24c>
 8002a52:	4a16      	ldr	r2, [pc, #88]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e01d      	b.n	8002a9c <HAL_RCC_OscConfig+0x288>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x270>
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e00b      	b.n	8002a9c <HAL_RCC_OscConfig+0x288>
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4a06      	ldr	r2, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x298>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa4:	f7fe ff9e 	bl	80019e4 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aaa:	e010      	b.n	8002ace <HAL_RCC_OscConfig+0x2ba>
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08006d58 	.word	0x08006d58
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7fe ff92 	bl	80019e4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	; 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e2bd      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ace:	4baf      	ldr	r3, [pc, #700]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x2a8>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fe ff82 	bl	80019e4 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7fe ff7e 	bl	80019e4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	; 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e2a9      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002af6:	4ba5      	ldr	r3, [pc, #660]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x2d0>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d060      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_OscConfig+0x310>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b0c      	cmp	r3, #12
 8002b1c:	d119      	bne.n	8002b52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d116      	bne.n	8002b52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b24:	4b99      	ldr	r3, [pc, #612]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_OscConfig+0x328>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e286      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b3c:	4993      	ldr	r1, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b3e:	4b93      	ldr	r3, [pc, #588]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	061b      	lsls	r3, r3, #24
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b50:	e040      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d023      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b5a:	4a8c      	ldr	r2, [pc, #560]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b5c:	4b8b      	ldr	r3, [pc, #556]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe ff3d 	bl	80019e4 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6e:	f7fe ff39 	bl	80019e4 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e264      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b80:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	497f      	ldr	r1, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b8e:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
 8002ba0:	e018      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba2:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002ba4:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe ff19 	bl	80019e4 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe ff15 	bl	80019e4 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e240      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d03c      	beq.n	8002c5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d01c      	beq.n	8002c22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be8:	4a68      	ldr	r2, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002bea:	4b68      	ldr	r3, [pc, #416]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fef4 	bl	80019e4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fe fef0 	bl	80019e4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e21b      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ef      	beq.n	8002c00 <HAL_RCC_OscConfig+0x3ec>
 8002c20:	e01b      	b.n	8002c5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4a5a      	ldr	r2, [pc, #360]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fed7 	bl	80019e4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fed3 	bl	80019e4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e1fe      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1ef      	bne.n	8002c3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80a6 	beq.w	8002db4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c6c:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10d      	bne.n	8002c94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c78:	4a44      	ldr	r2, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c7a:	4b44      	ldr	r3, [pc, #272]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c82:	6593      	str	r3, [r2, #88]	; 0x58
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c90:	2301      	movs	r3, #1
 8002c92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c94:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_RCC_OscConfig+0x57c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d118      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca0:	4a3b      	ldr	r2, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x57c>)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x57c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cac:	f7fe fe9a 	bl	80019e4 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb4:	f7fe fe96 	bl	80019e4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1c1      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc6:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_RCC_OscConfig+0x57c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x4d8>
 8002cda:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cea:	e024      	b.n	8002d36 <HAL_RCC_OscConfig+0x522>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b05      	cmp	r3, #5
 8002cf2:	d110      	bne.n	8002d16 <HAL_RCC_OscConfig+0x502>
 8002cf4:	4a25      	ldr	r2, [pc, #148]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002cf6:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f043 0304 	orr.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d04:	4a21      	ldr	r2, [pc, #132]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d06:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d14:	e00f      	b.n	8002d36 <HAL_RCC_OscConfig+0x522>
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d18:	4b1c      	ldr	r3, [pc, #112]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d26:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d28:	4b18      	ldr	r3, [pc, #96]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f023 0304 	bic.w	r3, r3, #4
 8002d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fe51 	bl	80019e4 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d46:	f7fe fe4d 	bl	80019e4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e176      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_OscConfig+0x578>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0ed      	beq.n	8002d46 <HAL_RCC_OscConfig+0x532>
 8002d6a:	e01a      	b.n	8002da2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6c:	f7fe fe3a 	bl	80019e4 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d72:	e00f      	b.n	8002d94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d74:	f7fe fe36 	bl	80019e4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d906      	bls.n	8002d94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e15f      	b.n	800304a <HAL_RCC_OscConfig+0x836>
 8002d8a:	bf00      	nop
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d94:	4baa      	ldr	r3, [pc, #680]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1e8      	bne.n	8002d74 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002da2:	7ffb      	ldrb	r3, [r7, #31]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4aa5      	ldr	r2, [pc, #660]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002daa:	4ba5      	ldr	r3, [pc, #660]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01c      	beq.n	8002e02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dc8:	4a9d      	ldr	r2, [pc, #628]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002dca:	4b9d      	ldr	r3, [pc, #628]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fe04 	bl	80019e4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de0:	f7fe fe00 	bl	80019e4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e12b      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002df2:	4b93      	ldr	r3, [pc, #588]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002df4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <HAL_RCC_OscConfig+0x5cc>
 8002e00:	e01b      	b.n	8002e3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e02:	4a8f      	ldr	r2, [pc, #572]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002e04:	4b8e      	ldr	r3, [pc, #568]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002e06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe fde7 	bl	80019e4 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e1a:	f7fe fde3 	bl	80019e4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e10e      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e2c:	4b84      	ldr	r3, [pc, #528]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1ef      	bne.n	8002e1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8102 	beq.w	8003048 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	f040 80c5 	bne.w	8002fd8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0203 	and.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d12c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d123      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d11b      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d113      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d067      	beq.n	8002f8c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d062      	beq.n	8002f88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec2:	4b5f      	ldr	r3, [pc, #380]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0bb      	b.n	800304a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002ed4:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002edc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ede:	f7fe fd81 	bl	80019e4 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe fd7d 	bl	80019e4 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e0a8      	b.n	800304a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef8:	4b51      	ldr	r3, [pc, #324]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f04:	484e      	ldr	r0, [pc, #312]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	; (8003044 <HAL_RCC_OscConfig+0x830>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f16:	3a01      	subs	r2, #1
 8002f18:	0112      	lsls	r2, r2, #4
 8002f1a:	4311      	orrs	r1, r2
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f20:	0212      	lsls	r2, r2, #8
 8002f22:	4311      	orrs	r1, r2
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f28:	0852      	lsrs	r2, r2, #1
 8002f2a:	3a01      	subs	r2, #1
 8002f2c:	0552      	lsls	r2, r2, #21
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0652      	lsls	r2, r2, #25
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f40:	06d2      	lsls	r2, r2, #27
 8002f42:	430a      	orrs	r2, r1
 8002f44:	4313      	orrs	r3, r2
 8002f46:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f48:	4a3d      	ldr	r2, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f4a:	4b3d      	ldr	r3, [pc, #244]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f54:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f56:	4b3a      	ldr	r3, [pc, #232]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f60:	f7fe fd40 	bl	80019e4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fd3c 	bl	80019e4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e067      	b.n	800304a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f86:	e05f      	b.n	8003048 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e05e      	b.n	800304a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d157      	bne.n	8003048 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f98:	4a29      	ldr	r2, [pc, #164]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fa6:	4b26      	ldr	r3, [pc, #152]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb0:	f7fe fd18 	bl	80019e4 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb8:	f7fe fd14 	bl	80019e4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e03f      	b.n	800304a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x7a4>
 8002fd6:	e037      	b.n	8003048 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d02d      	beq.n	800303a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002ff8:	4b11      	ldr	r3, [pc, #68]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f023 0303 	bic.w	r3, r3, #3
 8003000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003002:	4a0f      	ldr	r2, [pc, #60]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800300c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003010:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7fe fce7 	bl	80019e4 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301a:	f7fe fce3 	bl	80019e4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e00e      	b.n	800304a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_OscConfig+0x82c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x806>
 8003038:	e006      	b.n	8003048 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e005      	b.n	800304a <HAL_RCC_OscConfig+0x836>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop

08003054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0c8      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003068:	4b66      	ldr	r3, [pc, #408]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0207 	and.w	r2, r3, #7
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4963      	ldr	r1, [pc, #396]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003078:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0207 	and.w	r2, r3, #7
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b0      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d04c      	beq.n	800313e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d121      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e09e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e092      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d109      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e086      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e07e      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030fc:	4942      	ldr	r1, [pc, #264]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80030fe:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4313      	orrs	r3, r2
 800310c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fe fc69 	bl	80019e4 <HAL_GetTick>
 8003112:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	e00a      	b.n	800312c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003116:	f7fe fc65 	bl	80019e4 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f241 3288 	movw	r2, #5000	; 0x1388
 8003124:	4293      	cmp	r3, r2
 8003126:	d901      	bls.n	800312c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e066      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 020c 	and.w	r2, r3, #12
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	429a      	cmp	r2, r3
 800313c:	d1eb      	bne.n	8003116 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314a:	492f      	ldr	r1, [pc, #188]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800314c:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b29      	ldr	r3, [pc, #164]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0207 	and.w	r2, r3, #7
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d910      	bls.n	800318c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4926      	ldr	r1, [pc, #152]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800316c:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f023 0207 	bic.w	r2, r3, #7
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b22      	ldr	r3, [pc, #136]	; (8003204 <HAL_RCC_ClockConfig+0x1b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0207 	and.w	r2, r3, #7
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e036      	b.n	80031fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	491b      	ldr	r1, [pc, #108]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b6:	4914      	ldr	r1, [pc, #80]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031b8:	4b13      	ldr	r3, [pc, #76]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031ca:	f000 f825 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031ce:	4601      	mov	r1, r0
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_ClockConfig+0x1b4>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	fa21 f303 	lsr.w	r3, r1, r3
 80031e6:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <HAL_RCC_ClockConfig+0x1c0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd ff94 	bl	800111c <HAL_InitTick>
 80031f4:	4603      	mov	r3, r0
 80031f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40022000 	.word	0x40022000
 8003208:	40021000 	.word	0x40021000
 800320c:	08006d58 	.word	0x08006d58
 8003210:	20000000 	.word	0x20000000
 8003214:	2000000c 	.word	0x2000000c

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003230:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x34>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d121      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11e      	bne.n	800328a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800324c:	4b33      	ldr	r3, [pc, #204]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003258:	4b30      	ldr	r3, [pc, #192]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	61fb      	str	r3, [r7, #28]
 8003266:	e005      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003268:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003274:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <HAL_RCC_GetSysClockFreq+0x108>)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d102      	bne.n	8003296 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	e004      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800329c:	4b22      	ldr	r3, [pc, #136]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 800329e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d133      	bne.n	800330e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0xa4>
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0xaa>
 80032ba:	e005      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032be:	617b      	str	r3, [r7, #20]
      break;
 80032c0:	e005      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_GetSysClockFreq+0x110>)
 80032c4:	617b      	str	r3, [r7, #20]
      break;
 80032c6:	e002      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	617b      	str	r3, [r7, #20]
      break;
 80032cc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	3301      	adds	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	fb02 f203 	mul.w	r2, r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_GetSysClockFreq+0x104>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	f003 0303 	and.w	r3, r3, #3
 80032fe:	3301      	adds	r3, #1
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	fbb2 f3f3 	udiv	r3, r2, r3
 800330c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800330e:	69bb      	ldr	r3, [r7, #24]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	40021000 	.word	0x40021000
 8003320:	08006d70 	.word	0x08006d70
 8003324:	00f42400 	.word	0x00f42400
 8003328:	007a1200 	.word	0x007a1200

0800332c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_RCC_GetHCLKFreq+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000000 	.word	0x20000000

08003344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003348:	f7ff fff0 	bl	800332c <HAL_RCC_GetHCLKFreq>
 800334c:	4601      	mov	r1, r0
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	4a04      	ldr	r2, [pc, #16]	; (800336c <HAL_RCC_GetPCLK1Freq+0x28>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08006d68 	.word	0x08006d68

08003370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003374:	f7ff ffda 	bl	800332c <HAL_RCC_GetHCLKFreq>
 8003378:	4601      	mov	r1, r0
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x24>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003386:	5cd3      	ldrb	r3, [r2, r3]
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	08006d68 	.word	0x08006d68

0800339c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	220f      	movs	r2, #15
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0203 	and.w	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033d0:	4b09      	ldr	r3, [pc, #36]	; (80033f8 <HAL_RCC_GetClockConfig+0x5c>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	08db      	lsrs	r3, r3, #3
 80033d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033de:	4b07      	ldr	r3, [pc, #28]	; (80033fc <HAL_RCC_GetClockConfig+0x60>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0207 	and.w	r2, r3, #7
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40022000 	.word	0x40022000

08003400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003418:	f7ff f998 	bl	800274c <HAL_PWREx_GetVoltageRange>
 800341c:	6178      	str	r0, [r7, #20]
 800341e:	e014      	b.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003438:	f7ff f988 	bl	800274c <HAL_PWREx_GetVoltageRange>
 800343c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4a1e      	ldr	r2, [pc, #120]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003448:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003450:	d10b      	bne.n	800346a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b80      	cmp	r3, #128	; 0x80
 8003456:	d919      	bls.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2ba0      	cmp	r3, #160	; 0xa0
 800345c:	d902      	bls.n	8003464 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800345e:	2302      	movs	r3, #2
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e013      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003464:	2301      	movs	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	e010      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b80      	cmp	r3, #128	; 0x80
 800346e:	d902      	bls.n	8003476 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003470:	2303      	movs	r3, #3
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	e00a      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b80      	cmp	r3, #128	; 0x80
 800347a:	d102      	bne.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800347c:	2302      	movs	r3, #2
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	e004      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d101      	bne.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003488:	2301      	movs	r3, #1
 800348a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800348c:	490b      	ldr	r1, [pc, #44]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 0207 	bic.w	r2, r3, #7
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0207 	and.w	r2, r3, #7
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d001      	beq.n	80034ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40022000 	.word	0x40022000

080034c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c8:	2300      	movs	r3, #0
 80034ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034cc:	2300      	movs	r3, #0
 80034ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d02f      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034e4:	d005      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80034e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ea:	d015      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80034f2:	4aac      	ldr	r2, [pc, #688]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f4:	4bab      	ldr	r3, [pc, #684]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034fe:	e00c      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f9cc 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	74fb      	strb	r3, [r7, #19]
      break;
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800351a:	7cfb      	ldrb	r3, [r7, #19]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10b      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003520:	49a0      	ldr	r1, [pc, #640]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003522:	4ba0      	ldr	r3, [pc, #640]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003536:	e001      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8099 	beq.w	800367c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800354e:	4b95      	ldr	r3, [pc, #596]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4a8f      	ldr	r2, [pc, #572]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003566:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	; 0x58
 8003570:	4b8c      	ldr	r3, [pc, #560]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003580:	4a89      	ldr	r2, [pc, #548]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003582:	4b89      	ldr	r3, [pc, #548]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800358c:	f7fe fa2a 	bl	80019e4 <HAL_GetTick>
 8003590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003592:	e009      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003594:	f7fe fa26 	bl	80019e4 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d902      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	74fb      	strb	r3, [r7, #19]
        break;
 80035a6:	e005      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a8:	4b7f      	ldr	r3, [pc, #508]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ef      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d155      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01e      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d019      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035d6:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035e2:	4a70      	ldr	r2, [pc, #448]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e4:	4b6f      	ldr	r3, [pc, #444]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035f2:	4a6c      	ldr	r2, [pc, #432]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035f4:	4b6b      	ldr	r3, [pc, #428]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003602:	4a68      	ldr	r2, [pc, #416]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d016      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7fe f9e6 	bl	80019e4 <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800361a:	e00b      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800361c:	f7fe f9e2 	bl	80019e4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	f241 3288 	movw	r2, #5000	; 0x1388
 800362a:	4293      	cmp	r3, r2
 800362c:	d902      	bls.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	74fb      	strb	r3, [r7, #19]
            break;
 8003632:	e006      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003634:	4b5b      	ldr	r3, [pc, #364]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0ec      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003642:	7cfb      	ldrb	r3, [r7, #19]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003648:	4956      	ldr	r1, [pc, #344]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
 8003664:	e001      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800366a:	7c7b      	ldrb	r3, [r7, #17]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d105      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003670:	4a4c      	ldr	r2, [pc, #304]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003672:	4b4c      	ldr	r3, [pc, #304]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003688:	4946      	ldr	r1, [pc, #280]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f023 0203 	bic.w	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036aa:	493e      	ldr	r1, [pc, #248]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ac:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f023 020c 	bic.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0320 	and.w	r3, r3, #32
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036cc:	4935      	ldr	r1, [pc, #212]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036ee:	492d      	ldr	r1, [pc, #180]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003710:	4924      	ldr	r1, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003732:	491c      	ldr	r1, [pc, #112]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003734:	4b1b      	ldr	r3, [pc, #108]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00a      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003754:	4913      	ldr	r1, [pc, #76]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003756:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02c      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003776:	490b      	ldr	r1, [pc, #44]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003796:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003798:	4b02      	ldr	r3, [pc, #8]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a0:	60d3      	str	r3, [r2, #12]
 80037a2:	e015      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f871 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d028      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037dc:	4930      	ldr	r1, [pc, #192]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037de:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	d106      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e011      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003812:	d10c      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f842 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003820:	4603      	mov	r3, r0
 8003822:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800383a:	4919      	ldr	r1, [pc, #100]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2102      	movs	r1, #2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f81f 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003880:	4907      	ldr	r1, [pc, #28]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003896:	7cbb      	ldrb	r3, [r7, #18]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b73      	ldr	r3, [pc, #460]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038be:	4b70      	ldr	r3, [pc, #448]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d044      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e041      	b.n	8003974 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d00c      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x6e>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d013      	beq.n	8003924 <RCCEx_PLLSAI1_Config+0x80>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d120      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003900:	4b5f      	ldr	r3, [pc, #380]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e01a      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e013      	b.n	800394c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003924:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003930:	4b53      	ldr	r3, [pc, #332]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003940:	e006      	b.n	8003950 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      break;
 8003946:	e004      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003950:	bf00      	nop
    }

    if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10d      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003958:	4849      	ldr	r0, [pc, #292]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395a:	4b49      	ldr	r3, [pc, #292]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	430b      	orrs	r3, r1
 8003970:	4313      	orrs	r3, r2
 8003972:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d17c      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800397a:	4a41      	ldr	r2, [pc, #260]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003984:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003986:	f7fe f82d 	bl	80019e4 <HAL_GetTick>
 800398a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800398c:	e009      	b.n	80039a2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800398e:	f7fe f829 	bl	80019e4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d902      	bls.n	80039a2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	73fb      	strb	r3, [r7, #15]
        break;
 80039a0:	e005      	b.n	80039ae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a2:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d15f      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d110      	bne.n	80039dc <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ba:	4831      	ldr	r0, [pc, #196]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039bc:	4b30      	ldr	r3, [pc, #192]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80039c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6892      	ldr	r2, [r2, #8]
 80039cc:	0211      	lsls	r1, r2, #8
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68d2      	ldr	r2, [r2, #12]
 80039d2:	06d2      	lsls	r2, r2, #27
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4313      	orrs	r3, r2
 80039d8:	6103      	str	r3, [r0, #16]
 80039da:	e027      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d112      	bne.n	8003a08 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e2:	4827      	ldr	r0, [pc, #156]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e4:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80039ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6892      	ldr	r2, [r2, #8]
 80039f4:	0211      	lsls	r1, r2, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6912      	ldr	r2, [r2, #16]
 80039fa:	0852      	lsrs	r2, r2, #1
 80039fc:	3a01      	subs	r2, #1
 80039fe:	0552      	lsls	r2, r2, #21
 8003a00:	430a      	orrs	r2, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	6103      	str	r3, [r0, #16]
 8003a06:	e011      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a08:	481d      	ldr	r0, [pc, #116]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	0211      	lsls	r1, r2, #8
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6952      	ldr	r2, [r2, #20]
 8003a20:	0852      	lsrs	r2, r2, #1
 8003a22:	3a01      	subs	r2, #1
 8003a24:	0652      	lsls	r2, r2, #25
 8003a26:	430a      	orrs	r2, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a2e:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd ffd4 	bl	80019e4 <HAL_GetTick>
 8003a3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a3e:	e009      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a40:	f7fd ffd0 	bl	80019e4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d902      	bls.n	8003a54 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	73fb      	strb	r3, [r7, #15]
          break;
 8003a52:	e005      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d106      	bne.n	8003a74 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a66:	4906      	ldr	r1, [pc, #24]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a68:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000

08003a84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d06c      	beq.n	8003b70 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd faf2 	bl	8001094 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	22ca      	movs	r2, #202	; 0xca
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2253      	movs	r2, #83	; 0x53
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f9a0 	bl	8003e0e <RTC_EnterInitMode>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d14b      	bne.n	8003b70 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aea:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	6891      	ldr	r1, [r2, #8]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6850      	ldr	r0, [r2, #4]
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6912      	ldr	r2, [r2, #16]
 8003afe:	4310      	orrs	r0, r2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6992      	ldr	r2, [r2, #24]
 8003b04:	4302      	orrs	r2, r0
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	6911      	ldr	r1, [r2, #16]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6892      	ldr	r2, [r2, #8]
 8003b22:	0412      	lsls	r2, r2, #16
 8003b24:	430a      	orrs	r2, r1
 8003b26:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f9a3 	bl	8003e74 <RTC_ExitInitMode>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11b      	bne.n	8003b70 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b42:	f022 0203 	bic.w	r2, r2, #3
 8003b46:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	69d0      	ldr	r0, [r2, #28]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6952      	ldr	r2, [r2, #20]
 8003b5a:	4302      	orrs	r2, r0
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b7a:	b590      	push	{r4, r7, lr}
 8003b7c:	b087      	sub	sp, #28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_RTC_SetTime+0x1a>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e08b      	b.n	8003cac <HAL_RTC_SetTime+0x132>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	22ca      	movs	r2, #202	; 0xca
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2253      	movs	r2, #83	; 0x53
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f92a 	bl	8003e0e <RTC_EnterInitMode>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d163      	bne.n	8003c8c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d126      	bne.n	8003c18 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d102      	bne.n	8003bde <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f984 	bl	8003ef0 <RTC_ByteToBcd2>
 8003be8:	4603      	mov	r3, r0
 8003bea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f97d 	bl	8003ef0 <RTC_ByteToBcd2>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bfa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	789b      	ldrb	r3, [r3, #2]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 f975 	bl	8003ef0 <RTC_ByteToBcd2>
 8003c06:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c08:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	78db      	ldrb	r3, [r3, #3]
 8003c10:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e018      	b.n	8003c4a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	785b      	ldrb	r3, [r3, #1]
 8003c36:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c38:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c3e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c58:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	6892      	ldr	r2, [r2, #8]
 8003c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	6891      	ldr	r1, [r2, #8]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	68d0      	ldr	r0, [r2, #12]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	6912      	ldr	r2, [r2, #16]
 8003c7c:	4302      	orrs	r2, r0
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f8f6 	bl	8003e74 <RTC_ExitInitMode>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	22ff      	movs	r2, #255	; 0xff
 8003c92:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003caa:	7cfb      	ldrb	r3, [r7, #19]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cb4:	b590      	push	{r4, r7, lr}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_RTC_SetDate+0x1a>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e075      	b.n	8003dba <HAL_RTC_SetDate+0x106>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10e      	bne.n	8003d02 <HAL_RTC_SetDate+0x4e>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	785b      	ldrb	r3, [r3, #1]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	f023 0310 	bic.w	r3, r3, #16
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	330a      	adds	r3, #10
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11c      	bne.n	8003d42 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	78db      	ldrb	r3, [r3, #3]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f8ef 	bl	8003ef0 <RTC_ByteToBcd2>
 8003d12:	4603      	mov	r3, r0
 8003d14:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	785b      	ldrb	r3, [r3, #1]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f8e8 	bl	8003ef0 <RTC_ByteToBcd2>
 8003d20:	4603      	mov	r3, r0
 8003d22:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d24:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	789b      	ldrb	r3, [r3, #2]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f8e0 	bl	8003ef0 <RTC_ByteToBcd2>
 8003d30:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d32:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	e00e      	b.n	8003d60 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	78db      	ldrb	r3, [r3, #3]
 8003d46:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d4e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003d54:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	22ca      	movs	r2, #202	; 0xca
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2253      	movs	r2, #83	; 0x53
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f84c 	bl	8003e0e <RTC_EnterInitMode>
 8003d76:	4603      	mov	r3, r0
 8003d78:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003d8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d8e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f86f 	bl	8003e74 <RTC_ExitInitMode>
 8003d96:	4603      	mov	r3, r0
 8003d98:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}

08003dc2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	68d2      	ldr	r2, [r2, #12]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dd8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003dda:	f7fd fe03 	bl	80019e4 <HAL_GetTick>
 8003dde:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003de0:	e009      	b.n	8003df6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003de2:	f7fd fdff 	bl	80019e4 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003df0:	d901      	bls.n	8003df6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e007      	b.n	8003e06 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0ee      	beq.n	8003de2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d120      	bne.n	8003e6a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e30:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e32:	f7fd fdd7 	bl	80019e4 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e38:	e00d      	b.n	8003e56 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003e3a:	f7fd fdd3 	bl	80019e4 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e48:	d905      	bls.n	8003e56 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2203      	movs	r2, #3
 8003e52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <RTC_EnterInitMode+0x5c>
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d1e7      	bne.n	8003e3a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003e80:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003e82:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10c      	bne.n	8003eb2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff ff92 	bl	8003dc2 <HAL_RTC_WaitForSynchro>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01e      	beq.n	8003ee2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	73fb      	strb	r3, [r7, #15]
 8003eb0:	e017      	b.n	8003ee2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003eb4:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 0320 	bic.w	r3, r3, #32
 8003ebc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7ff ff7f 	bl	8003dc2 <HAL_RTC_WaitForSynchro>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2203      	movs	r2, #3
 8003ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <RTC_ExitInitMode+0x78>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f043 0320 	orr.w	r3, r3, #32
 8003ee0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40002800 	.word	0x40002800

08003ef0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003f02:	e005      	b.n	8003f10 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003f0a:	7afb      	ldrb	r3, [r7, #11]
 8003f0c:	3b0a      	subs	r3, #10
 8003f0e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	2b09      	cmp	r3, #9
 8003f14:	d8f6      	bhi.n	8003f04 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	b2db      	uxtb	r3, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e049      	b.n	8003fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fd f9da 	bl	8001310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 fc9c 	bl	80048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d001      	beq.n	8003ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e03b      	b.n	8004070 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	68d2      	ldr	r2, [r2, #12]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_Base_Start_IT+0x9c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x4e>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d004      	beq.n	800402e <HAL_TIM_Base_Start_IT+0x4e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_TIM_Base_Start_IT+0xa0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d115      	bne.n	800405a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_TIM_Base_Start_IT+0xa4>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d015      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x8c>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d011      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	e008      	b.n	800406c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e000      	b.n	800406e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40014000 	.word	0x40014000
 8004084:	00010007 	.word	0x00010007

08004088 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e049      	b.n	800412e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f841 	bl	8004136 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4619      	mov	r1, r3
 80040c6:	4610      	mov	r0, r2
 80040c8:	f000 fbf0 	bl	80048ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
	...

0800414c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d104      	bne.n	8004166 <HAL_TIM_IC_Start_IT+0x1a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e023      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x62>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d104      	bne.n	8004176 <HAL_TIM_IC_Start_IT+0x2a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004172:	b2db      	uxtb	r3, r3
 8004174:	e01b      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x62>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b08      	cmp	r3, #8
 800417a:	d104      	bne.n	8004186 <HAL_TIM_IC_Start_IT+0x3a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e013      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x62>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b0c      	cmp	r3, #12
 800418a:	d104      	bne.n	8004196 <HAL_TIM_IC_Start_IT+0x4a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e00b      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x62>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b10      	cmp	r3, #16
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_IC_Start_IT+0x5a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	e003      	b.n	80041ae <HAL_TIM_IC_Start_IT+0x62>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_TIM_IC_Start_IT+0x74>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e013      	b.n	80041e8 <HAL_TIM_IC_Start_IT+0x9c>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d104      	bne.n	80041d0 <HAL_TIM_IC_Start_IT+0x84>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	e00b      	b.n	80041e8 <HAL_TIM_IC_Start_IT+0x9c>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d104      	bne.n	80041e0 <HAL_TIM_IC_Start_IT+0x94>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e003      	b.n	80041e8 <HAL_TIM_IC_Start_IT+0x9c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0xaa>
   || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d001      	beq.n	80041fa <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0c4      	b.n	8004384 <HAL_TIM_IC_Start_IT+0x238>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_TIM_IC_Start_IT+0xbe>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004208:	e023      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x106>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b04      	cmp	r3, #4
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Start_IT+0xce>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	e01b      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x106>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Start_IT+0xde>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	e013      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x106>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Start_IT+0xee>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004238:	e00b      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x106>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b10      	cmp	r3, #16
 800423e:	d104      	bne.n	800424a <HAL_TIM_IC_Start_IT+0xfe>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004248:	e003      	b.n	8004252 <HAL_TIM_IC_Start_IT+0x106>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <HAL_TIM_IC_Start_IT+0x116>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004260:	e013      	b.n	800428a <HAL_TIM_IC_Start_IT+0x13e>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d104      	bne.n	8004272 <HAL_TIM_IC_Start_IT+0x126>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004270:	e00b      	b.n	800428a <HAL_TIM_IC_Start_IT+0x13e>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <HAL_TIM_IC_Start_IT+0x136>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004280:	e003      	b.n	800428a <HAL_TIM_IC_Start_IT+0x13e>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b0c      	cmp	r3, #12
 800428e:	d841      	bhi.n	8004314 <HAL_TIM_IC_Start_IT+0x1c8>
 8004290:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_TIM_IC_Start_IT+0x14c>)
 8004292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004296:	bf00      	nop
 8004298:	080042cd 	.word	0x080042cd
 800429c:	08004315 	.word	0x08004315
 80042a0:	08004315 	.word	0x08004315
 80042a4:	08004315 	.word	0x08004315
 80042a8:	080042df 	.word	0x080042df
 80042ac:	08004315 	.word	0x08004315
 80042b0:	08004315 	.word	0x08004315
 80042b4:	08004315 	.word	0x08004315
 80042b8:	080042f1 	.word	0x080042f1
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004315 	.word	0x08004315
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004303 	.word	0x08004303
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	68d2      	ldr	r2, [r2, #12]
 80042d6:	f042 0202 	orr.w	r2, r2, #2
 80042da:	60da      	str	r2, [r3, #12]
      break;
 80042dc:	e01b      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	68d2      	ldr	r2, [r2, #12]
 80042e8:	f042 0204 	orr.w	r2, r2, #4
 80042ec:	60da      	str	r2, [r3, #12]
      break;
 80042ee:	e012      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	60da      	str	r2, [r3, #12]
      break;
 8004300:	e009      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	68d2      	ldr	r2, [r2, #12]
 800430c:	f042 0210 	orr.w	r2, r2, #16
 8004310:	60da      	str	r2, [r3, #12]
      break;
 8004312:	e000      	b.n	8004316 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8004314:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2201      	movs	r2, #1
 800431c:	6839      	ldr	r1, [r7, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fcce 	bl	8004cc0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_TIM_IC_Start_IT+0x240>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d009      	beq.n	8004342 <HAL_TIM_IC_Start_IT+0x1f6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004336:	d004      	beq.n	8004342 <HAL_TIM_IC_Start_IT+0x1f6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a14      	ldr	r2, [pc, #80]	; (8004390 <HAL_TIM_IC_Start_IT+0x244>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d115      	bne.n	800436e <HAL_TIM_IC_Start_IT+0x222>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_TIM_IC_Start_IT+0x248>)
 800434a:	4013      	ands	r3, r2
 800434c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d015      	beq.n	8004380 <HAL_TIM_IC_Start_IT+0x234>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d011      	beq.n	8004380 <HAL_TIM_IC_Start_IT+0x234>
    {
      __HAL_TIM_ENABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	6812      	ldr	r2, [r2, #0]
 8004366:	f042 0201 	orr.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436c:	e008      	b.n	8004380 <HAL_TIM_IC_Start_IT+0x234>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	e000      	b.n	8004382 <HAL_TIM_IC_Start_IT+0x236>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40012c00 	.word	0x40012c00
 8004390:	40014000 	.word	0x40014000
 8004394:	00010007 	.word	0x00010007

08004398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d122      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d11b      	bne.n	80043f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0202 	mvn.w	r2, #2
 80043c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fc fcee 	bl	8000dbc <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fa44 	bl	8004870 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fa4b 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d122      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b04      	cmp	r3, #4
 800440e:	d11b      	bne.n	8004448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f06f 0204 	mvn.w	r2, #4
 8004418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7fc fcc4 	bl	8000dbc <HAL_TIM_IC_CaptureCallback>
 8004434:	e005      	b.n	8004442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa1a 	bl	8004870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa21 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0308 	and.w	r3, r3, #8
 8004452:	2b08      	cmp	r3, #8
 8004454:	d122      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b08      	cmp	r3, #8
 8004462:	d11b      	bne.n	800449c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0208 	mvn.w	r2, #8
 800446c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fc9a 	bl	8000dbc <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9f0 	bl	8004870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9f7 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0310 	and.w	r3, r3, #16
 80044a6:	2b10      	cmp	r3, #16
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0210 	mvn.w	r2, #16
 80044c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2208      	movs	r2, #8
 80044c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fc70 	bl	8000dbc <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9c6 	bl	8004870 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f9cd 	bl	8004884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10e      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d107      	bne.n	800451c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0201 	mvn.w	r2, #1
 8004514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7fc fcb0 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b80      	cmp	r3, #128	; 0x80
 8004528:	d10e      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b80      	cmp	r3, #128	; 0x80
 8004536:	d107      	bne.n	8004548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fc52 	bl	8004dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d10e      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b80      	cmp	r3, #128	; 0x80
 8004564:	d107      	bne.n	8004576 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fc45 	bl	8004e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d10e      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458e:	2b40      	cmp	r3, #64	; 0x40
 8004590:	d107      	bne.n	80045a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800459a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f97b 	bl	8004898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0220 	mvn.w	r2, #32
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fc05 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e082      	b.n	80046f6 <HAL_TIM_IC_ConfigChannel+0x120>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11b      	bne.n	8004636 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6818      	ldr	r0, [r3, #0]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f000 f9b1 	bl	8004974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	6992      	ldr	r2, [r2, #24]
 800461c:	f022 020c 	bic.w	r2, r2, #12
 8004620:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68fa      	ldr	r2, [r7, #12]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	6991      	ldr	r1, [r2, #24]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	430a      	orrs	r2, r1
 8004632:	619a      	str	r2, [r3, #24]
 8004634:	e05a      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11c      	bne.n	8004676 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 fa17 	bl	8004a7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	6992      	ldr	r2, [r2, #24]
 800465a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800465e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	6991      	ldr	r1, [r2, #24]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	0212      	lsls	r2, r2, #8
 8004670:	430a      	orrs	r2, r1
 8004672:	619a      	str	r2, [r3, #24]
 8004674:	e03a      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d11b      	bne.n	80046b4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f000 fa64 	bl	8004b58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	69d2      	ldr	r2, [r2, #28]
 800469a:	f022 020c 	bic.w	r2, r2, #12
 800469e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	69d1      	ldr	r1, [r2, #28]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	61da      	str	r2, [r3, #28]
 80046b2:	e01b      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f000 fa84 	bl	8004bd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	69d2      	ldr	r2, [r2, #28]
 80046d2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80046d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	69d1      	ldr	r1, [r2, #28]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	6892      	ldr	r2, [r2, #8]
 80046e6:	0212      	lsls	r2, r2, #8
 80046e8:	430a      	orrs	r2, r1
 80046ea:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b084      	sub	sp, #16
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
 8004706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_TIM_ConfigClockSource+0x18>
 8004712:	2302      	movs	r3, #2
 8004714:	e0a8      	b.n	8004868 <HAL_TIM_ConfigClockSource+0x16a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004734:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004738:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004740:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d067      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0x124>
 8004752:	2b40      	cmp	r3, #64	; 0x40
 8004754:	d80b      	bhi.n	800476e <HAL_TIM_ConfigClockSource+0x70>
 8004756:	2b10      	cmp	r3, #16
 8004758:	d073      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x144>
 800475a:	2b10      	cmp	r3, #16
 800475c:	d802      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x66>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d06f      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004762:	e078      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004764:	2b20      	cmp	r3, #32
 8004766:	d06c      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x144>
 8004768:	2b30      	cmp	r3, #48	; 0x30
 800476a:	d06a      	beq.n	8004842 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800476c:	e073      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800476e:	2b70      	cmp	r3, #112	; 0x70
 8004770:	d00d      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x90>
 8004772:	2b70      	cmp	r3, #112	; 0x70
 8004774:	d804      	bhi.n	8004780 <HAL_TIM_ConfigClockSource+0x82>
 8004776:	2b50      	cmp	r3, #80	; 0x50
 8004778:	d033      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0xe4>
 800477a:	2b60      	cmp	r3, #96	; 0x60
 800477c:	d041      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800477e:	e06a      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004784:	d066      	beq.n	8004854 <HAL_TIM_ConfigClockSource+0x156>
 8004786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478a:	d017      	beq.n	80047bc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800478c:	e063      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6899      	ldr	r1, [r3, #8]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f000 fa6f 	bl	8004c80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	609a      	str	r2, [r3, #8]
      break;
 80047ba:	e04c      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6818      	ldr	r0, [r3, #0]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	6899      	ldr	r1, [r3, #8]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f000 fa58 	bl	8004c80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047de:	609a      	str	r2, [r3, #8]
      break;
 80047e0:	e039      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	6859      	ldr	r1, [r3, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	461a      	mov	r2, r3
 80047f0:	f000 f916 	bl	8004a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2150      	movs	r1, #80	; 0x50
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa25 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004800:	e029      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6859      	ldr	r1, [r3, #4]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	461a      	mov	r2, r3
 8004810:	f000 f972 	bl	8004af8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2160      	movs	r1, #96	; 0x60
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fa15 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004820:	e019      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	461a      	mov	r2, r3
 8004830:	f000 f8f6 	bl	8004a20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2140      	movs	r1, #64	; 0x40
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fa05 	bl	8004c4a <TIM_ITRx_SetConfig>
      break;
 8004840:	e009      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 f9fc 	bl	8004c4a <TIM_ITRx_SetConfig>
        break;
 8004852:	e000      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004854:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a2a      	ldr	r2, [pc, #168]	; (8004968 <TIM_Base_SetConfig+0xbc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d003      	beq.n	80048cc <TIM_Base_SetConfig+0x20>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ca:	d108      	bne.n	80048de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a21      	ldr	r2, [pc, #132]	; (8004968 <TIM_Base_SetConfig+0xbc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00b      	beq.n	80048fe <TIM_Base_SetConfig+0x52>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ec:	d007      	beq.n	80048fe <TIM_Base_SetConfig+0x52>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a1e      	ldr	r2, [pc, #120]	; (800496c <TIM_Base_SetConfig+0xc0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_Base_SetConfig+0x52>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_Base_SetConfig+0xc4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d108      	bne.n	8004910 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4313      	orrs	r3, r2
 800490e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <TIM_Base_SetConfig+0xbc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d007      	beq.n	800494c <TIM_Base_SetConfig+0xa0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a0b      	ldr	r2, [pc, #44]	; (800496c <TIM_Base_SetConfig+0xc0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0xa0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <TIM_Base_SetConfig+0xc4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d103      	bne.n	8004954 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	615a      	str	r2, [r3, #20]
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40012c00 	.word	0x40012c00
 800496c:	40014000 	.word	0x40014000
 8004970:	40014400 	.word	0x40014400

08004974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <TIM_TI1_SetConfig+0xa4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_TI1_SetConfig+0x3e>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d003      	beq.n	80049b2 <TIM_TI1_SetConfig+0x3e>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <TIM_TI1_SetConfig+0xa8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d101      	bne.n	80049b6 <TIM_TI1_SetConfig+0x42>
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <TIM_TI1_SetConfig+0x44>
 80049b6:	2300      	movs	r3, #0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0303 	bic.w	r3, r3, #3
 80049c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e003      	b.n	80049d6 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	f023 030a 	bic.w	r3, r3, #10
 80049f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f003 030a 	and.w	r3, r3, #10
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40012c00 	.word	0x40012c00
 8004a1c:	40014000 	.word	0x40014000

08004a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0201 	bic.w	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f023 030a 	bic.w	r3, r3, #10
 8004a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	f023 0210 	bic.w	r2, r3, #16
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	371c      	adds	r7, #28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	031b      	lsls	r3, r3, #12
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	bf00      	nop
 8004b4e:	371c      	adds	r7, #28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 0303 	bic.w	r3, r3, #3
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	031b      	lsls	r3, r3, #12
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	031b      	lsls	r3, r3, #12
 8004c28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b085      	sub	sp, #20
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	f043 0307 	orr.w	r3, r3, #7
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	609a      	str	r2, [r3, #8]
}
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	371c      	adds	r7, #28
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1a      	ldr	r2, [r3, #32]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1a      	ldr	r2, [r3, #32]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d101      	bne.n	8004d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d20:	2302      	movs	r3, #2
 8004d22:	e04f      	b.n	8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d108      	bne.n	8004d60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004d54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d10c      	bne.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012c00 	.word	0x40012c00
 8004dd4:	40014000 	.word	0x40014000

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e040      	b.n	8004ea8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc fada 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f82c 	bl	8004eb0 <UART_SetConfig>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e022      	b.n	8004ea8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fa28 	bl	80052c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	6852      	ldr	r2, [r2, #4]
 8004e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 faaf 	bl	8005404 <UART_CheckIdleState>
 8004ea6:	4603      	mov	r3, r0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b5b0      	push	{r4, r5, r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	4bac      	ldr	r3, [pc, #688]	; (8005190 <UART_SetConfig+0x2e0>)
 8004ee0:	400b      	ands	r3, r1
 8004ee2:	69f9      	ldr	r1, [r7, #28]
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	6852      	ldr	r2, [r2, #4]
 8004ef2:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68d2      	ldr	r2, [r2, #12]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4aa2      	ldr	r2, [pc, #648]	; (8005194 <UART_SetConfig+0x2e4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a99      	ldr	r2, [pc, #612]	; (8005198 <UART_SetConfig+0x2e8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d122      	bne.n	8004f7c <UART_SetConfig+0xcc>
 8004f36:	4b99      	ldr	r3, [pc, #612]	; (800519c <UART_SetConfig+0x2ec>)
 8004f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d817      	bhi.n	8004f74 <UART_SetConfig+0xc4>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <UART_SetConfig+0x9c>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f69 	.word	0x08004f69
 8004f54:	08004f63 	.word	0x08004f63
 8004f58:	08004f6f 	.word	0x08004f6f
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	76fb      	strb	r3, [r7, #27]
 8004f60:	e072      	b.n	8005048 <UART_SetConfig+0x198>
 8004f62:	2302      	movs	r3, #2
 8004f64:	76fb      	strb	r3, [r7, #27]
 8004f66:	e06f      	b.n	8005048 <UART_SetConfig+0x198>
 8004f68:	2304      	movs	r3, #4
 8004f6a:	76fb      	strb	r3, [r7, #27]
 8004f6c:	e06c      	b.n	8005048 <UART_SetConfig+0x198>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	76fb      	strb	r3, [r7, #27]
 8004f72:	e069      	b.n	8005048 <UART_SetConfig+0x198>
 8004f74:	2310      	movs	r3, #16
 8004f76:	76fb      	strb	r3, [r7, #27]
 8004f78:	bf00      	nop
 8004f7a:	e065      	b.n	8005048 <UART_SetConfig+0x198>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a87      	ldr	r2, [pc, #540]	; (80051a0 <UART_SetConfig+0x2f0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d134      	bne.n	8004ff0 <UART_SetConfig+0x140>
 8004f86:	4b85      	ldr	r3, [pc, #532]	; (800519c <UART_SetConfig+0x2ec>)
 8004f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b0c      	cmp	r3, #12
 8004f92:	d829      	bhi.n	8004fe8 <UART_SetConfig+0x138>
 8004f94:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0xec>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fd1 	.word	0x08004fd1
 8004fa0:	08004fe9 	.word	0x08004fe9
 8004fa4:	08004fe9 	.word	0x08004fe9
 8004fa8:	08004fe9 	.word	0x08004fe9
 8004fac:	08004fdd 	.word	0x08004fdd
 8004fb0:	08004fe9 	.word	0x08004fe9
 8004fb4:	08004fe9 	.word	0x08004fe9
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	08004fd7 	.word	0x08004fd7
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08004fe9 	.word	0x08004fe9
 8004fcc:	08004fe3 	.word	0x08004fe3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	76fb      	strb	r3, [r7, #27]
 8004fd4:	e038      	b.n	8005048 <UART_SetConfig+0x198>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	76fb      	strb	r3, [r7, #27]
 8004fda:	e035      	b.n	8005048 <UART_SetConfig+0x198>
 8004fdc:	2304      	movs	r3, #4
 8004fde:	76fb      	strb	r3, [r7, #27]
 8004fe0:	e032      	b.n	8005048 <UART_SetConfig+0x198>
 8004fe2:	2308      	movs	r3, #8
 8004fe4:	76fb      	strb	r3, [r7, #27]
 8004fe6:	e02f      	b.n	8005048 <UART_SetConfig+0x198>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	76fb      	strb	r3, [r7, #27]
 8004fec:	bf00      	nop
 8004fee:	e02b      	b.n	8005048 <UART_SetConfig+0x198>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a67      	ldr	r2, [pc, #412]	; (8005194 <UART_SetConfig+0x2e4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d124      	bne.n	8005044 <UART_SetConfig+0x194>
 8004ffa:	4b68      	ldr	r3, [pc, #416]	; (800519c <UART_SetConfig+0x2ec>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d012      	beq.n	8005030 <UART_SetConfig+0x180>
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500e:	d802      	bhi.n	8005016 <UART_SetConfig+0x166>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d007      	beq.n	8005024 <UART_SetConfig+0x174>
 8005014:	e012      	b.n	800503c <UART_SetConfig+0x18c>
 8005016:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501a:	d006      	beq.n	800502a <UART_SetConfig+0x17a>
 800501c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005020:	d009      	beq.n	8005036 <UART_SetConfig+0x186>
 8005022:	e00b      	b.n	800503c <UART_SetConfig+0x18c>
 8005024:	2300      	movs	r3, #0
 8005026:	76fb      	strb	r3, [r7, #27]
 8005028:	e00e      	b.n	8005048 <UART_SetConfig+0x198>
 800502a:	2302      	movs	r3, #2
 800502c:	76fb      	strb	r3, [r7, #27]
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x198>
 8005030:	2304      	movs	r3, #4
 8005032:	76fb      	strb	r3, [r7, #27]
 8005034:	e008      	b.n	8005048 <UART_SetConfig+0x198>
 8005036:	2308      	movs	r3, #8
 8005038:	76fb      	strb	r3, [r7, #27]
 800503a:	e005      	b.n	8005048 <UART_SetConfig+0x198>
 800503c:	2310      	movs	r3, #16
 800503e:	76fb      	strb	r3, [r7, #27]
 8005040:	bf00      	nop
 8005042:	e001      	b.n	8005048 <UART_SetConfig+0x198>
 8005044:	2310      	movs	r3, #16
 8005046:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a51      	ldr	r2, [pc, #324]	; (8005194 <UART_SetConfig+0x2e4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d16d      	bne.n	800512e <UART_SetConfig+0x27e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005052:	7efb      	ldrb	r3, [r7, #27]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d824      	bhi.n	80050a2 <UART_SetConfig+0x1f2>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x1b0>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005085 	.word	0x08005085
 8005064:	080050a3 	.word	0x080050a3
 8005068:	0800508d 	.word	0x0800508d
 800506c:	080050a3 	.word	0x080050a3
 8005070:	08005093 	.word	0x08005093
 8005074:	080050a3 	.word	0x080050a3
 8005078:	080050a3 	.word	0x080050a3
 800507c:	080050a3 	.word	0x080050a3
 8005080:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005084:	f7fe f95e 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8005088:	6178      	str	r0, [r7, #20]
        break;
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b45      	ldr	r3, [pc, #276]	; (80051a4 <UART_SetConfig+0x2f4>)
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	e00c      	b.n	80050ac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe f8c1 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8005096:	6178      	str	r0, [r7, #20]
        break;
 8005098:	e008      	b.n	80050ac <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	617b      	str	r3, [r7, #20]
        break;
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	76bb      	strb	r3, [r7, #26]
        break;
 80050aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80f8 	beq.w	80052a4 <UART_SetConfig+0x3f4>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d805      	bhi.n	80050d0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d202      	bcs.n	80050d6 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	76bb      	strb	r3, [r7, #26]
 80050d4:	e0e6      	b.n	80052a4 <UART_SetConfig+0x3f4>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	461a      	mov	r2, r3
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	021d      	lsls	r5, r3, #8
 80050e0:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80050e4:	0214      	lsls	r4, r2, #8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	085b      	lsrs	r3, r3, #1
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	18a0      	adds	r0, r4, r2
 80050f4:	eb45 0103 	adc.w	r1, r5, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	461a      	mov	r2, r3
 8005102:	4623      	mov	r3, r4
 8005104:	f7fb f8b4 	bl	8000270 <__aeabi_uldivmod>
 8005108:	4603      	mov	r3, r0
 800510a:	460c      	mov	r4, r1
 800510c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d308      	bcc.n	8005128 <UART_SetConfig+0x278>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511c:	d204      	bcs.n	8005128 <UART_SetConfig+0x278>
        {
          huart->Instance->BRR = usartdiv;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	e0bd      	b.n	80052a4 <UART_SetConfig+0x3f4>
        }
        else
        {
          ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	76bb      	strb	r3, [r7, #26]
 800512c:	e0ba      	b.n	80052a4 <UART_SetConfig+0x3f4>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d168      	bne.n	800520a <UART_SetConfig+0x35a>
  {
    switch (clocksource)
 8005138:	7efb      	ldrb	r3, [r7, #27]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d834      	bhi.n	80051a8 <UART_SetConfig+0x2f8>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0x294>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005169 	.word	0x08005169
 8005148:	08005171 	.word	0x08005171
 800514c:	08005179 	.word	0x08005179
 8005150:	080051a9 	.word	0x080051a9
 8005154:	0800517f 	.word	0x0800517f
 8005158:	080051a9 	.word	0x080051a9
 800515c:	080051a9 	.word	0x080051a9
 8005160:	080051a9 	.word	0x080051a9
 8005164:	08005187 	.word	0x08005187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005168:	f7fe f8ec 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 800516c:	6178      	str	r0, [r7, #20]
        break;
 800516e:	e020      	b.n	80051b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005170:	f7fe f8fe 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8005174:	6178      	str	r0, [r7, #20]
        break;
 8005176:	e01c      	b.n	80051b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <UART_SetConfig+0x2f4>)
 800517a:	617b      	str	r3, [r7, #20]
        break;
 800517c:	e019      	b.n	80051b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517e:	f7fe f84b 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8005182:	6178      	str	r0, [r7, #20]
        break;
 8005184:	e015      	b.n	80051b2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800518a:	617b      	str	r3, [r7, #20]
        break;
 800518c:	e011      	b.n	80051b2 <UART_SetConfig+0x302>
 800518e:	bf00      	nop
 8005190:	efff69f3 	.word	0xefff69f3
 8005194:	40008000 	.word	0x40008000
 8005198:	40013800 	.word	0x40013800
 800519c:	40021000 	.word	0x40021000
 80051a0:	40004400 	.word	0x40004400
 80051a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	76bb      	strb	r3, [r7, #26]
        break;
 80051b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d075      	beq.n	80052a4 <UART_SetConfig+0x3f4>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	005a      	lsls	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	441a      	add	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d916      	bls.n	8005204 <UART_SetConfig+0x354>
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d212      	bcs.n	8005204 <UART_SetConfig+0x354>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f023 030f 	bic.w	r3, r3, #15
 80051e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	89fa      	ldrh	r2, [r7, #14]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e04f      	b.n	80052a4 <UART_SetConfig+0x3f4>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	76bb      	strb	r3, [r7, #26]
 8005208:	e04c      	b.n	80052a4 <UART_SetConfig+0x3f4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800520a:	7efb      	ldrb	r3, [r7, #27]
 800520c:	2b08      	cmp	r3, #8
 800520e:	d828      	bhi.n	8005262 <UART_SetConfig+0x3b2>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <UART_SetConfig+0x368>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	08005263 	.word	0x08005263
 8005228:	08005253 	.word	0x08005253
 800522c:	08005263 	.word	0x08005263
 8005230:	08005263 	.word	0x08005263
 8005234:	08005263 	.word	0x08005263
 8005238:	0800525b 	.word	0x0800525b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7fe f882 	bl	8003344 <HAL_RCC_GetPCLK1Freq>
 8005240:	6178      	str	r0, [r7, #20]
        break;
 8005242:	e013      	b.n	800526c <UART_SetConfig+0x3bc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005244:	f7fe f894 	bl	8003370 <HAL_RCC_GetPCLK2Freq>
 8005248:	6178      	str	r0, [r7, #20]
        break;
 800524a:	e00f      	b.n	800526c <UART_SetConfig+0x3bc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800524c:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <UART_SetConfig+0x40c>)
 800524e:	617b      	str	r3, [r7, #20]
        break;
 8005250:	e00c      	b.n	800526c <UART_SetConfig+0x3bc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005252:	f7fd ffe1 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 8005256:	6178      	str	r0, [r7, #20]
        break;
 8005258:	e008      	b.n	800526c <UART_SetConfig+0x3bc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800525e:	617b      	str	r3, [r7, #20]
        break;
 8005260:	e004      	b.n	800526c <UART_SetConfig+0x3bc>
      default:
        pclk = 0U;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	76bb      	strb	r3, [r7, #26]
        break;
 800526a:	bf00      	nop
    }

    if (pclk != 0U)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <UART_SetConfig+0x3f4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085a      	lsrs	r2, r3, #1
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	441a      	add	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	b29b      	uxth	r3, r3
 8005286:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	d908      	bls.n	80052a0 <UART_SetConfig+0x3f0>
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d204      	bcs.n	80052a0 <UART_SetConfig+0x3f0>
      {
        huart->Instance->BRR = usartdiv;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e001      	b.n	80052a4 <UART_SetConfig+0x3f4>
      }
      else
      {
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80052b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bdb0      	pop	{r4, r5, r7, pc}
 80052ba:	bf00      	nop
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	6852      	ldr	r2, [r2, #4]
 80052de:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	6852      	ldr	r2, [r2, #4]
 8005300:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	6852      	ldr	r2, [r2, #4]
 8005322:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	6852      	ldr	r2, [r2, #4]
 8005344:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6812      	ldr	r2, [r2, #0]
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	6892      	ldr	r2, [r2, #8]
 8005388:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01a      	beq.n	80053d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	6852      	ldr	r2, [r2, #4]
 80053aa:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053be:	d10a      	bne.n	80053d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	6852      	ldr	r2, [r2, #4]
 80053ca:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	6852      	ldr	r2, [r2, #4]
 80053ec:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
  }
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005412:	f7fc fae7 	bl	80019e4 <HAL_GetTick>
 8005416:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d10e      	bne.n	8005444 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f82a 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e020      	b.n	8005486 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	2b04      	cmp	r3, #4
 8005450:	d10e      	bne.n	8005470 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005452:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f814 	bl	800548e <UART_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e00a      	b.n	8005486 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549e:	e05d      	b.n	800555c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a6:	d059      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fc fa9c 	bl	80019e4 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d802      	bhi.n	80054be <UART_WaitOnFlagUntilTimeout+0x30>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11b      	bne.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	6812      	ldr	r2, [r2, #0]
 80054d6:	6892      	ldr	r2, [r2, #8]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e042      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d02b      	beq.n	800555c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005512:	d123      	bne.n	800555c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800551c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800552c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	6812      	ldr	r2, [r2, #0]
 8005536:	6892      	ldr	r2, [r2, #8]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2220      	movs	r2, #32
 800554e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e00f      	b.n	800557c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	401a      	ands	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	bf0c      	ite	eq
 800556c:	2301      	moveq	r3, #1
 800556e:	2300      	movne	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	461a      	mov	r2, r3
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	429a      	cmp	r2, r3
 8005578:	d092      	beq.n	80054a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800558c:	2300      	movs	r3, #0
 800558e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005590:	f000 fd28 	bl	8005fe4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005594:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <pvPortMalloc+0x170>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d101      	bne.n	80055a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800559c:	f000 f90c 	bl	80057b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055a0:	4b55      	ldr	r3, [pc, #340]	; (80056f8 <pvPortMalloc+0x174>)
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f040 808c 	bne.w	80056c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01c      	beq.n	80055ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055b4:	2208      	movs	r2, #8
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4413      	add	r3, r2
 80055ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d013      	beq.n	80055ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f023 0307 	bic.w	r3, r3, #7
 80055cc:	3308      	adds	r3, #8
 80055ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
 80055ec:	e7fe      	b.n	80055ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d068      	beq.n	80056c6 <pvPortMalloc+0x142>
 80055f4:	4b41      	ldr	r3, [pc, #260]	; (80056fc <pvPortMalloc+0x178>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d863      	bhi.n	80056c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055fe:	4b40      	ldr	r3, [pc, #256]	; (8005700 <pvPortMalloc+0x17c>)
 8005600:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <pvPortMalloc+0x17c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005608:	e004      	b.n	8005614 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d203      	bcs.n	8005626 <pvPortMalloc+0xa2>
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1f1      	bne.n	800560a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005626:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <pvPortMalloc+0x170>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	429a      	cmp	r2, r3
 800562e:	d04a      	beq.n	80056c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2208      	movs	r2, #8
 8005636:	4413      	add	r3, r2
 8005638:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	2308      	movs	r3, #8
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	429a      	cmp	r2, r3
 8005650:	d91e      	bls.n	8005690 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4413      	add	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <pvPortMalloc+0xf4>
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e7fe      	b.n	8005676 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f000 f8f6 	bl	800587c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <pvPortMalloc+0x178>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	4a18      	ldr	r2, [pc, #96]	; (80056fc <pvPortMalloc+0x178>)
 800569c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <pvPortMalloc+0x178>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b18      	ldr	r3, [pc, #96]	; (8005704 <pvPortMalloc+0x180>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d203      	bcs.n	80056b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <pvPortMalloc+0x178>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <pvPortMalloc+0x180>)
 80056b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <pvPortMalloc+0x174>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056c6:	f000 fc9b 	bl	8006000 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <pvPortMalloc+0x164>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e7fe      	b.n	80056e6 <pvPortMalloc+0x162>
	return pvReturn;
 80056e8:	69fb      	ldr	r3, [r7, #28]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	2000107c 	.word	0x2000107c
 80056f8:	20001088 	.word	0x20001088
 80056fc:	20001080 	.word	0x20001080
 8005700:	20001074 	.word	0x20001074
 8005704:	20001084 	.word	0x20001084

08005708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d046      	beq.n	80057a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800571a:	2308      	movs	r3, #8
 800571c:	425b      	negs	r3, r3
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4413      	add	r3, r2
 8005722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <vPortFree+0xa8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4013      	ands	r3, r2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <vPortFree+0x42>
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	e7fe      	b.n	8005748 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <vPortFree+0x5e>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	e7fe      	b.n	8005764 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	4b11      	ldr	r3, [pc, #68]	; (80057b0 <vPortFree+0xa8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d019      	beq.n	80057a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d115      	bne.n	80057a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <vPortFree+0xa8>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	43db      	mvns	r3, r3
 8005786:	401a      	ands	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800578c:	f000 fc2a 	bl	8005fe4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <vPortFree+0xac>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4413      	add	r3, r2
 800579a:	4a06      	ldr	r2, [pc, #24]	; (80057b4 <vPortFree+0xac>)
 800579c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f000 f86c 	bl	800587c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80057a4:	f000 fc2c 	bl	8006000 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80057a8:	bf00      	nop
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20001088 	.word	0x20001088
 80057b4:	20001080 	.word	0x20001080

080057b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80057c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057c4:	4b27      	ldr	r3, [pc, #156]	; (8005864 <prvHeapInit+0xac>)
 80057c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00c      	beq.n	80057ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3307      	adds	r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	4a1f      	ldr	r2, [pc, #124]	; (8005864 <prvHeapInit+0xac>)
 80057e8:	4413      	add	r3, r2
 80057ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057f0:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <prvHeapInit+0xb0>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057f6:	4b1c      	ldr	r3, [pc, #112]	; (8005868 <prvHeapInit+0xb0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005804:	2208      	movs	r2, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f023 0307 	bic.w	r3, r3, #7
 8005812:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <prvHeapInit+0xb4>)
 8005818:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800581a:	4b14      	ldr	r3, [pc, #80]	; (800586c <prvHeapInit+0xb4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <prvHeapInit+0xb4>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	1ad2      	subs	r2, r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <prvHeapInit+0xb4>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <prvHeapInit+0xb8>)
 8005846:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <prvHeapInit+0xbc>)
 800584e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005850:	4b09      	ldr	r3, [pc, #36]	; (8005878 <prvHeapInit+0xc0>)
 8005852:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	200004bc 	.word	0x200004bc
 8005868:	20001074 	.word	0x20001074
 800586c:	2000107c 	.word	0x2000107c
 8005870:	20001084 	.word	0x20001084
 8005874:	20001080 	.word	0x20001080
 8005878:	20001088 	.word	0x20001088

0800587c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005884:	4b28      	ldr	r3, [pc, #160]	; (8005928 <prvInsertBlockIntoFreeList+0xac>)
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e002      	b.n	8005890 <prvInsertBlockIntoFreeList+0x14>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	429a      	cmp	r2, r3
 8005898:	d3f7      	bcc.n	800588a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	441a      	add	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d108      	bne.n	80058be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	441a      	add	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d118      	bne.n	8005904 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	4b15      	ldr	r3, [pc, #84]	; (800592c <prvInsertBlockIntoFreeList+0xb0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d00d      	beq.n	80058fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	441a      	add	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e008      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <prvInsertBlockIntoFreeList+0xb0>)
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	e003      	b.n	800590c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d002      	beq.n	800591a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20001074 	.word	0x20001074
 800592c:	2000107c 	.word	0x2000107c

08005930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f103 0208 	add.w	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0208 	add.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6892      	ldr	r2, [r2, #8]
 80059e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d103      	bne.n	8005a06 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b04      	subs	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b04      	subs	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3b04      	subs	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a58:	4a0c      	ldr	r2, [pc, #48]	; (8005a8c <pxPortInitialiseStack+0x64>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3b14      	subs	r3, #20
 8005a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3b04      	subs	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f06f 0202 	mvn.w	r2, #2
 8005a76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b20      	subs	r3, #32
 8005a7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	08005a91 	.word	0x08005a91

08005a90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <prvTaskExitError+0x50>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aa2:	d009      	beq.n	8005ab8 <prvTaskExitError+0x28>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e7fe      	b.n	8005ab6 <prvTaskExitError+0x26>
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aca:	bf00      	nop
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d0fc      	beq.n	8005acc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	20000014 	.word	0x20000014
	...

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	4770      	bx	lr
 8005b0c:	f3af 8000 	nop.w

08005b10 <pxCurrentTCBConst2>:
 8005b10:	2000108c 	.word	0x2000108c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b30:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <vPortEnterCritical+0x54>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	4a0d      	ldr	r2, [pc, #52]	; (8005b6c <vPortEnterCritical+0x54>)
 8005b38:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <vPortEnterCritical+0x54>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10e      	bne.n	8005b60 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <vPortEnterCritical+0x58>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <vPortEnterCritical+0x48>
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	e7fe      	b.n	8005b5e <vPortEnterCritical+0x46>
	}
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	20000014 	.word	0x20000014
 8005b70:	e000ed04 	.word	0xe000ed04

08005b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b7a:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <vPortExitCritical+0x4c>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <vPortExitCritical+0x22>
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	e7fe      	b.n	8005b94 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <vPortExitCritical+0x4c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	4a08      	ldr	r2, [pc, #32]	; (8005bc0 <vPortExitCritical+0x4c>)
 8005b9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ba0:	4b07      	ldr	r3, [pc, #28]	; (8005bc0 <vPortExitCritical+0x4c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d104      	bne.n	8005bb2 <vPortExitCritical+0x3e>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	20000014 	.word	0x20000014
	...

08005bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005bd0:	f3ef 8009 	mrs	r0, PSP
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <pxCurrentTCBConst>)
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f01e 0f10 	tst.w	lr, #16
 8005be0:	bf08      	it	eq
 8005be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	6010      	str	r0, [r2, #0]
 8005bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005bf4:	f380 8811 	msr	BASEPRI, r0
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
 8005c00:	f000 fb52 	bl	80062a8 <vTaskSwitchContext>
 8005c04:	f04f 0000 	mov.w	r0, #0
 8005c08:	f380 8811 	msr	BASEPRI, r0
 8005c0c:	bc09      	pop	{r0, r3}
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	6808      	ldr	r0, [r1, #0]
 8005c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c16:	f01e 0f10 	tst.w	lr, #16
 8005c1a:	bf08      	it	eq
 8005c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c20:	f380 8809 	msr	PSP, r0
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst>:
 8005c30:	2000108c 	.word	0x2000108c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c50:	f000 fa72 	bl	8006138 <xTaskIncrementTick>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <SysTick_Handler+0x3c>)
 8005c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	2300      	movs	r3, #0
 8005c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c6c:	bf00      	nop
 8005c6e:	3708      	adds	r7, #8
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	e000ed04 	.word	0xe000ed04

08005c78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af04      	add	r7, sp, #16
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fc79 	bl	8005584 <pvPortMalloc>
 8005c92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00e      	beq.n	8005cb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c9a:	205c      	movs	r0, #92	; 0x5c
 8005c9c:	f7ff fc72 	bl	8005584 <pvPortMalloc>
 8005ca0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	631a      	str	r2, [r3, #48]	; 0x30
 8005cae:	e005      	b.n	8005cbc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cb0:	6978      	ldr	r0, [r7, #20]
 8005cb2:	f7ff fd29 	bl	8005708 <vPortFree>
 8005cb6:	e001      	b.n	8005cbc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cca:	88fa      	ldrh	r2, [r7, #6]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9303      	str	r3, [sp, #12]
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f80e 	bl	8005d02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ce6:	69f8      	ldr	r0, [r7, #28]
 8005ce8:	f000 f89a 	bl	8005e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e002      	b.n	8005cf8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
	}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	461a      	mov	r2, r3
 8005d1a:	21a5      	movs	r1, #165	; 0xa5
 8005d1c:	f000 fbe3 	bl	80064e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d009      	beq.n	8005d58 <prvInitialiseNewTask+0x56>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e7fe      	b.n	8005d56 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01f      	beq.n	8005d9e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
 8005d62:	e012      	b.n	8005d8a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	7819      	ldrb	r1, [r3, #0]
 8005d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	4413      	add	r3, r2
 8005d72:	3334      	adds	r3, #52	; 0x34
 8005d74:	460a      	mov	r2, r1
 8005d76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d006      	beq.n	8005d92 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	3301      	adds	r3, #1
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	2b0f      	cmp	r3, #15
 8005d8e:	d9e9      	bls.n	8005d64 <prvInitialiseNewTask+0x62>
 8005d90:	e000      	b.n	8005d94 <prvInitialiseNewTask+0x92>
			{
				break;
 8005d92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9c:	e003      	b.n	8005da6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	2b37      	cmp	r3, #55	; 0x37
 8005daa:	d901      	bls.n	8005db0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dac:	2337      	movs	r3, #55	; 0x37
 8005dae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fdd2 	bl	8005970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dce:	3318      	adds	r3, #24
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f7ff fdcd 	bl	8005970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	2200      	movs	r2, #0
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	69b8      	ldr	r0, [r7, #24]
 8005e00:	f7ff fe12 	bl	8005a28 <pxPortInitialiseStack>
 8005e04:	4602      	mov	r2, r0
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e16:	bf00      	nop
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e28:	f7ff fe76 	bl	8005b18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e3e:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <prvAddNewTaskToReadyList+0xc4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d110      	bne.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e4c:	f000 fa88 	bl	8006360 <prvInitialiseTaskLists>
 8005e50:	e00d      	b.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e52:	4b26      	ldr	r3, [pc, #152]	; (8005eec <prvAddNewTaskToReadyList+0xcc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d109      	bne.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d802      	bhi.n	8005e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e68:	4a1f      	ldr	r2, [pc, #124]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	4a1e      	ldr	r2, [pc, #120]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <prvAddNewTaskToReadyList+0xd0>)
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <prvAddNewTaskToReadyList+0xd4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d903      	bls.n	8005e94 <prvAddNewTaskToReadyList+0x74>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <prvAddNewTaskToReadyList+0xd4>)
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <prvAddNewTaskToReadyList+0xd8>)
 8005ea2:	441a      	add	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	3304      	adds	r3, #4
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	f7ff fd6d 	bl	800598a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005eb0:	f7ff fe60 	bl	8005b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eb4:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <prvAddNewTaskToReadyList+0xcc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00e      	beq.n	8005eda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvAddNewTaskToReadyList+0xc8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d207      	bcs.n	8005eda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eca:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <prvAddNewTaskToReadyList+0xdc>)
 8005ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eda:	bf00      	nop
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20001560 	.word	0x20001560
 8005ee8:	2000108c 	.word	0x2000108c
 8005eec:	2000156c 	.word	0x2000156c
 8005ef0:	2000157c 	.word	0x2000157c
 8005ef4:	20001568 	.word	0x20001568
 8005ef8:	20001090 	.word	0x20001090
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f08:	f7ff fe06 	bl	8005b18 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <vTaskDelete+0x18>
 8005f12:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <vTaskDelete+0xc4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e000      	b.n	8005f1a <vTaskDelete+0x1a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fd56 	bl	80059d2 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	3318      	adds	r3, #24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fd4d 	bl	80059d2 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005f38:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <vTaskDelete+0xc8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <vTaskDelete+0xc8>)
 8005f40:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005f42:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <vTaskDelete+0xc4>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d10b      	bne.n	8005f64 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	481e      	ldr	r0, [pc, #120]	; (8005fcc <vTaskDelete+0xcc>)
 8005f54:	f7ff fd19 	bl	800598a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005f58:	4b1d      	ldr	r3, [pc, #116]	; (8005fd0 <vTaskDelete+0xd0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a1c      	ldr	r2, [pc, #112]	; (8005fd0 <vTaskDelete+0xd0>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e009      	b.n	8005f78 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005f64:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <vTaskDelete+0xd4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	4a1a      	ldr	r2, [pc, #104]	; (8005fd4 <vTaskDelete+0xd4>)
 8005f6c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fa36 	bl	80063e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005f74:	f000 fa62 	bl	800643c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005f78:	f7ff fdfc 	bl	8005b74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005f7c:	4b16      	ldr	r3, [pc, #88]	; (8005fd8 <vTaskDelete+0xd8>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01a      	beq.n	8005fba <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8005f84:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <vTaskDelete+0xc4>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d115      	bne.n	8005fba <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005f8e:	4b13      	ldr	r3, [pc, #76]	; (8005fdc <vTaskDelete+0xdc>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <vTaskDelete+0xaa>
 8005f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60bb      	str	r3, [r7, #8]
 8005fa8:	e7fe      	b.n	8005fa8 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 8005faa:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <vTaskDelete+0xe0>)
 8005fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005fba:	bf00      	nop
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000108c 	.word	0x2000108c
 8005fc8:	2000157c 	.word	0x2000157c
 8005fcc:	20001534 	.word	0x20001534
 8005fd0:	20001548 	.word	0x20001548
 8005fd4:	20001560 	.word	0x20001560
 8005fd8:	2000156c 	.word	0x2000156c
 8005fdc:	20001584 	.word	0x20001584
 8005fe0:	e000ed04 	.word	0xe000ed04

08005fe4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fe8:	4b04      	ldr	r3, [pc, #16]	; (8005ffc <vTaskSuspendAll+0x18>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3301      	adds	r3, #1
 8005fee:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <vTaskSuspendAll+0x18>)
 8005ff0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005ff2:	bf00      	nop
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	20001584 	.word	0x20001584

08006000 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800600a:	2300      	movs	r3, #0
 800600c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <xTaskResumeAll+0x114>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d109      	bne.n	800602a <xTaskResumeAll+0x2a>
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	603b      	str	r3, [r7, #0]
 8006028:	e7fe      	b.n	8006028 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800602a:	f7ff fd75 	bl	8005b18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800602e:	4b39      	ldr	r3, [pc, #228]	; (8006114 <xTaskResumeAll+0x114>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3b01      	subs	r3, #1
 8006034:	4a37      	ldr	r2, [pc, #220]	; (8006114 <xTaskResumeAll+0x114>)
 8006036:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006038:	4b36      	ldr	r3, [pc, #216]	; (8006114 <xTaskResumeAll+0x114>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d162      	bne.n	8006106 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006040:	4b35      	ldr	r3, [pc, #212]	; (8006118 <xTaskResumeAll+0x118>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d05e      	beq.n	8006106 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006048:	e02f      	b.n	80060aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604a:	4b34      	ldr	r3, [pc, #208]	; (800611c <xTaskResumeAll+0x11c>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3318      	adds	r3, #24
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fcbb 	bl	80059d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3304      	adds	r3, #4
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff fcb6 	bl	80059d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606a:	4b2d      	ldr	r3, [pc, #180]	; (8006120 <xTaskResumeAll+0x120>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d903      	bls.n	800607a <xTaskResumeAll+0x7a>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <xTaskResumeAll+0x120>)
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4a27      	ldr	r2, [pc, #156]	; (8006124 <xTaskResumeAll+0x124>)
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3304      	adds	r3, #4
 800608e:	4619      	mov	r1, r3
 8006090:	4610      	mov	r0, r2
 8006092:	f7ff fc7a 	bl	800598a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4b23      	ldr	r3, [pc, #140]	; (8006128 <xTaskResumeAll+0x128>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d302      	bcc.n	80060aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060a4:	4b21      	ldr	r3, [pc, #132]	; (800612c <xTaskResumeAll+0x12c>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060aa:	4b1c      	ldr	r3, [pc, #112]	; (800611c <xTaskResumeAll+0x11c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1cb      	bne.n	800604a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060b8:	f000 f9c0 	bl	800643c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060bc:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <xTaskResumeAll+0x130>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d010      	beq.n	80060ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060c8:	f000 f836 	bl	8006138 <xTaskIncrementTick>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060d2:	4b16      	ldr	r3, [pc, #88]	; (800612c <xTaskResumeAll+0x12c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3b01      	subs	r3, #1
 80060dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f1      	bne.n	80060c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80060e4:	4b12      	ldr	r3, [pc, #72]	; (8006130 <xTaskResumeAll+0x130>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060ea:	4b10      	ldr	r3, [pc, #64]	; (800612c <xTaskResumeAll+0x12c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d009      	beq.n	8006106 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <xTaskResumeAll+0x134>)
 80060f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006106:	f7ff fd35 	bl	8005b74 <vPortExitCritical>

	return xAlreadyYielded;
 800610a:	68bb      	ldr	r3, [r7, #8]
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20001584 	.word	0x20001584
 8006118:	20001560 	.word	0x20001560
 800611c:	20001520 	.word	0x20001520
 8006120:	20001568 	.word	0x20001568
 8006124:	20001090 	.word	0x20001090
 8006128:	2000108c 	.word	0x2000108c
 800612c:	20001574 	.word	0x20001574
 8006130:	20001570 	.word	0x20001570
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006142:	4b4e      	ldr	r3, [pc, #312]	; (800627c <xTaskIncrementTick+0x144>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	f040 8088 	bne.w	800625c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800614c:	4b4c      	ldr	r3, [pc, #304]	; (8006280 <xTaskIncrementTick+0x148>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006154:	4a4a      	ldr	r2, [pc, #296]	; (8006280 <xTaskIncrementTick+0x148>)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11f      	bne.n	80061a0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006160:	4b48      	ldr	r3, [pc, #288]	; (8006284 <xTaskIncrementTick+0x14c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <xTaskIncrementTick+0x46>
 800616a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800616e:	f383 8811 	msr	BASEPRI, r3
 8006172:	f3bf 8f6f 	isb	sy
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	e7fe      	b.n	800617c <xTaskIncrementTick+0x44>
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <xTaskIncrementTick+0x14c>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	4b40      	ldr	r3, [pc, #256]	; (8006288 <xTaskIncrementTick+0x150>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a3e      	ldr	r2, [pc, #248]	; (8006284 <xTaskIncrementTick+0x14c>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4a3e      	ldr	r2, [pc, #248]	; (8006288 <xTaskIncrementTick+0x150>)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	4b3e      	ldr	r3, [pc, #248]	; (800628c <xTaskIncrementTick+0x154>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a3c      	ldr	r2, [pc, #240]	; (800628c <xTaskIncrementTick+0x154>)
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	f000 f94e 	bl	800643c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061a0:	4b3b      	ldr	r3, [pc, #236]	; (8006290 <xTaskIncrementTick+0x158>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d349      	bcc.n	800623e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061aa:	4b36      	ldr	r3, [pc, #216]	; (8006284 <xTaskIncrementTick+0x14c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061b4:	4b36      	ldr	r3, [pc, #216]	; (8006290 <xTaskIncrementTick+0x158>)
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061ba:	601a      	str	r2, [r3, #0]
					break;
 80061bc:	e03f      	b.n	800623e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061be:	4b31      	ldr	r3, [pc, #196]	; (8006284 <xTaskIncrementTick+0x14c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d203      	bcs.n	80061de <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061d6:	4a2e      	ldr	r2, [pc, #184]	; (8006290 <xTaskIncrementTick+0x158>)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061dc:	e02f      	b.n	800623e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	3304      	adds	r3, #4
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fbf5 	bl	80059d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	3318      	adds	r3, #24
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fbec 	bl	80059d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4b25      	ldr	r3, [pc, #148]	; (8006294 <xTaskIncrementTick+0x15c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d903      	bls.n	800620e <xTaskIncrementTick+0xd6>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	4a22      	ldr	r2, [pc, #136]	; (8006294 <xTaskIncrementTick+0x15c>)
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <xTaskIncrementTick+0x160>)
 800621c:	441a      	add	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	3304      	adds	r3, #4
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f7ff fbb0 	bl	800598a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622e:	4b1b      	ldr	r3, [pc, #108]	; (800629c <xTaskIncrementTick+0x164>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006234:	429a      	cmp	r2, r3
 8006236:	d3b8      	bcc.n	80061aa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623c:	e7b5      	b.n	80061aa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800623e:	4b17      	ldr	r3, [pc, #92]	; (800629c <xTaskIncrementTick+0x164>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006244:	4914      	ldr	r1, [pc, #80]	; (8006298 <xTaskIncrementTick+0x160>)
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d907      	bls.n	8006266 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8006256:	2301      	movs	r3, #1
 8006258:	617b      	str	r3, [r7, #20]
 800625a:	e004      	b.n	8006266 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800625c:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <xTaskIncrementTick+0x168>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <xTaskIncrementTick+0x168>)
 8006264:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006266:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <xTaskIncrementTick+0x16c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800626e:	2301      	movs	r3, #1
 8006270:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006272:	697b      	ldr	r3, [r7, #20]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	20001584 	.word	0x20001584
 8006280:	20001564 	.word	0x20001564
 8006284:	20001518 	.word	0x20001518
 8006288:	2000151c 	.word	0x2000151c
 800628c:	20001578 	.word	0x20001578
 8006290:	20001580 	.word	0x20001580
 8006294:	20001568 	.word	0x20001568
 8006298:	20001090 	.word	0x20001090
 800629c:	2000108c 	.word	0x2000108c
 80062a0:	20001570 	.word	0x20001570
 80062a4:	20001574 	.word	0x20001574

080062a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062ae:	4b27      	ldr	r3, [pc, #156]	; (800634c <vTaskSwitchContext+0xa4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d003      	beq.n	80062be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062b6:	4b26      	ldr	r3, [pc, #152]	; (8006350 <vTaskSwitchContext+0xa8>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062bc:	e040      	b.n	8006340 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <vTaskSwitchContext+0xa8>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c4:	4b23      	ldr	r3, [pc, #140]	; (8006354 <vTaskSwitchContext+0xac>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	60fb      	str	r3, [r7, #12]
 80062ca:	e00f      	b.n	80062ec <vTaskSwitchContext+0x44>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <vTaskSwitchContext+0x3e>
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e7fe      	b.n	80062e4 <vTaskSwitchContext+0x3c>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	491a      	ldr	r1, [pc, #104]	; (8006358 <vTaskSwitchContext+0xb0>)
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	440b      	add	r3, r1
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0e5      	beq.n	80062cc <vTaskSwitchContext+0x24>
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4a13      	ldr	r2, [pc, #76]	; (8006358 <vTaskSwitchContext+0xb0>)
 800630c:	4413      	add	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	3308      	adds	r3, #8
 8006322:	429a      	cmp	r2, r3
 8006324:	d104      	bne.n	8006330 <vTaskSwitchContext+0x88>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	605a      	str	r2, [r3, #4]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4a09      	ldr	r2, [pc, #36]	; (800635c <vTaskSwitchContext+0xb4>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4a06      	ldr	r2, [pc, #24]	; (8006354 <vTaskSwitchContext+0xac>)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6013      	str	r3, [r2, #0]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	20001584 	.word	0x20001584
 8006350:	20001574 	.word	0x20001574
 8006354:	20001568 	.word	0x20001568
 8006358:	20001090 	.word	0x20001090
 800635c:	2000108c 	.word	0x2000108c

08006360 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006366:	2300      	movs	r3, #0
 8006368:	607b      	str	r3, [r7, #4]
 800636a:	e00c      	b.n	8006386 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <prvInitialiseTaskLists+0x60>)
 8006378:	4413      	add	r3, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fad8 	bl	8005930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3301      	adds	r3, #1
 8006384:	607b      	str	r3, [r7, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b37      	cmp	r3, #55	; 0x37
 800638a:	d9ef      	bls.n	800636c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800638c:	480d      	ldr	r0, [pc, #52]	; (80063c4 <prvInitialiseTaskLists+0x64>)
 800638e:	f7ff facf 	bl	8005930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006392:	480d      	ldr	r0, [pc, #52]	; (80063c8 <prvInitialiseTaskLists+0x68>)
 8006394:	f7ff facc 	bl	8005930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006398:	480c      	ldr	r0, [pc, #48]	; (80063cc <prvInitialiseTaskLists+0x6c>)
 800639a:	f7ff fac9 	bl	8005930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800639e:	480c      	ldr	r0, [pc, #48]	; (80063d0 <prvInitialiseTaskLists+0x70>)
 80063a0:	f7ff fac6 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063a4:	480b      	ldr	r0, [pc, #44]	; (80063d4 <prvInitialiseTaskLists+0x74>)
 80063a6:	f7ff fac3 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063aa:	4b0b      	ldr	r3, [pc, #44]	; (80063d8 <prvInitialiseTaskLists+0x78>)
 80063ac:	4a05      	ldr	r2, [pc, #20]	; (80063c4 <prvInitialiseTaskLists+0x64>)
 80063ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <prvInitialiseTaskLists+0x7c>)
 80063b2:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <prvInitialiseTaskLists+0x68>)
 80063b4:	601a      	str	r2, [r3, #0]
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20001090 	.word	0x20001090
 80063c4:	200014f0 	.word	0x200014f0
 80063c8:	20001504 	.word	0x20001504
 80063cc:	20001520 	.word	0x20001520
 80063d0:	20001534 	.word	0x20001534
 80063d4:	2000154c 	.word	0x2000154c
 80063d8:	20001518 	.word	0x20001518
 80063dc:	2000151c 	.word	0x2000151c

080063e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff f986 	bl	8005708 <vPortFree>
				vPortFree( pxTCB );
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff f983 	bl	8005708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006402:	e017      	b.n	8006434 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800640a:	2b01      	cmp	r3, #1
 800640c:	d103      	bne.n	8006416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff f97a 	bl	8005708 <vPortFree>
	}
 8006414:	e00e      	b.n	8006434 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800641c:	2b02      	cmp	r3, #2
 800641e:	d009      	beq.n	8006434 <prvDeleteTCB+0x54>
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	e7fe      	b.n	8006432 <prvDeleteTCB+0x52>
	}
 8006434:	bf00      	nop
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <prvResetNextTaskUnblockTime+0x38>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <prvResetNextTaskUnblockTime+0x3c>)
 800644e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006454:	e008      	b.n	8006468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <prvResetNextTaskUnblockTime+0x38>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a04      	ldr	r2, [pc, #16]	; (8006478 <prvResetNextTaskUnblockTime+0x3c>)
 8006466:	6013      	str	r3, [r2, #0]
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20001518 	.word	0x20001518
 8006478:	20001580 	.word	0x20001580

0800647c <__errno>:
 800647c:	4b01      	ldr	r3, [pc, #4]	; (8006484 <__errno+0x8>)
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	20000018 	.word	0x20000018

08006488 <__libc_init_array>:
 8006488:	b570      	push	{r4, r5, r6, lr}
 800648a:	4e0d      	ldr	r6, [pc, #52]	; (80064c0 <__libc_init_array+0x38>)
 800648c:	4c0d      	ldr	r4, [pc, #52]	; (80064c4 <__libc_init_array+0x3c>)
 800648e:	1ba4      	subs	r4, r4, r6
 8006490:	10a4      	asrs	r4, r4, #2
 8006492:	2500      	movs	r5, #0
 8006494:	42a5      	cmp	r5, r4
 8006496:	d109      	bne.n	80064ac <__libc_init_array+0x24>
 8006498:	4e0b      	ldr	r6, [pc, #44]	; (80064c8 <__libc_init_array+0x40>)
 800649a:	4c0c      	ldr	r4, [pc, #48]	; (80064cc <__libc_init_array+0x44>)
 800649c:	f000 fc3e 	bl	8006d1c <_init>
 80064a0:	1ba4      	subs	r4, r4, r6
 80064a2:	10a4      	asrs	r4, r4, #2
 80064a4:	2500      	movs	r5, #0
 80064a6:	42a5      	cmp	r5, r4
 80064a8:	d105      	bne.n	80064b6 <__libc_init_array+0x2e>
 80064aa:	bd70      	pop	{r4, r5, r6, pc}
 80064ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064b0:	4798      	blx	r3
 80064b2:	3501      	adds	r5, #1
 80064b4:	e7ee      	b.n	8006494 <__libc_init_array+0xc>
 80064b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064ba:	4798      	blx	r3
 80064bc:	3501      	adds	r5, #1
 80064be:	e7f2      	b.n	80064a6 <__libc_init_array+0x1e>
 80064c0:	08007548 	.word	0x08007548
 80064c4:	08007548 	.word	0x08007548
 80064c8:	08007548 	.word	0x08007548
 80064cc:	0800754c 	.word	0x0800754c

080064d0 <memcpy>:
 80064d0:	b510      	push	{r4, lr}
 80064d2:	1e43      	subs	r3, r0, #1
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	d100      	bne.n	80064dc <memcpy+0xc>
 80064da:	bd10      	pop	{r4, pc}
 80064dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e4:	e7f7      	b.n	80064d6 <memcpy+0x6>

080064e6 <memset>:
 80064e6:	4402      	add	r2, r0
 80064e8:	4603      	mov	r3, r0
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d100      	bne.n	80064f0 <memset+0xa>
 80064ee:	4770      	bx	lr
 80064f0:	f803 1b01 	strb.w	r1, [r3], #1
 80064f4:	e7f9      	b.n	80064ea <memset+0x4>
	...

080064f8 <siprintf>:
 80064f8:	b40e      	push	{r1, r2, r3}
 80064fa:	b500      	push	{lr}
 80064fc:	b09c      	sub	sp, #112	; 0x70
 80064fe:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006502:	ab1d      	add	r3, sp, #116	; 0x74
 8006504:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006510:	480a      	ldr	r0, [pc, #40]	; (800653c <siprintf+0x44>)
 8006512:	9104      	str	r1, [sp, #16]
 8006514:	9107      	str	r1, [sp, #28]
 8006516:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800651a:	f853 2b04 	ldr.w	r2, [r3], #4
 800651e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006522:	6800      	ldr	r0, [r0, #0]
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	a902      	add	r1, sp, #8
 8006528:	f000 f866 	bl	80065f8 <_svfiprintf_r>
 800652c:	9b02      	ldr	r3, [sp, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	b01c      	add	sp, #112	; 0x70
 8006534:	f85d eb04 	ldr.w	lr, [sp], #4
 8006538:	b003      	add	sp, #12
 800653a:	4770      	bx	lr
 800653c:	20000018 	.word	0x20000018

08006540 <__ssputs_r>:
 8006540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006544:	688e      	ldr	r6, [r1, #8]
 8006546:	429e      	cmp	r6, r3
 8006548:	4682      	mov	sl, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4691      	mov	r9, r2
 800654e:	4698      	mov	r8, r3
 8006550:	d835      	bhi.n	80065be <__ssputs_r+0x7e>
 8006552:	898a      	ldrh	r2, [r1, #12]
 8006554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006558:	d031      	beq.n	80065be <__ssputs_r+0x7e>
 800655a:	6825      	ldr	r5, [r4, #0]
 800655c:	6909      	ldr	r1, [r1, #16]
 800655e:	1a6f      	subs	r7, r5, r1
 8006560:	6965      	ldr	r5, [r4, #20]
 8006562:	2302      	movs	r3, #2
 8006564:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006568:	fb95 f5f3 	sdiv	r5, r5, r3
 800656c:	f108 0301 	add.w	r3, r8, #1
 8006570:	443b      	add	r3, r7
 8006572:	429d      	cmp	r5, r3
 8006574:	bf38      	it	cc
 8006576:	461d      	movcc	r5, r3
 8006578:	0553      	lsls	r3, r2, #21
 800657a:	d531      	bpl.n	80065e0 <__ssputs_r+0xa0>
 800657c:	4629      	mov	r1, r5
 800657e:	f000 fb2d 	bl	8006bdc <_malloc_r>
 8006582:	4606      	mov	r6, r0
 8006584:	b950      	cbnz	r0, 800659c <__ssputs_r+0x5c>
 8006586:	230c      	movs	r3, #12
 8006588:	f8ca 3000 	str.w	r3, [sl]
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800659c:	463a      	mov	r2, r7
 800659e:	6921      	ldr	r1, [r4, #16]
 80065a0:	f7ff ff96 	bl	80064d0 <memcpy>
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ae:	81a3      	strh	r3, [r4, #12]
 80065b0:	6126      	str	r6, [r4, #16]
 80065b2:	6165      	str	r5, [r4, #20]
 80065b4:	443e      	add	r6, r7
 80065b6:	1bed      	subs	r5, r5, r7
 80065b8:	6026      	str	r6, [r4, #0]
 80065ba:	60a5      	str	r5, [r4, #8]
 80065bc:	4646      	mov	r6, r8
 80065be:	4546      	cmp	r6, r8
 80065c0:	bf28      	it	cs
 80065c2:	4646      	movcs	r6, r8
 80065c4:	4632      	mov	r2, r6
 80065c6:	4649      	mov	r1, r9
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	f000 fa9f 	bl	8006b0c <memmove>
 80065ce:	68a3      	ldr	r3, [r4, #8]
 80065d0:	1b9b      	subs	r3, r3, r6
 80065d2:	60a3      	str	r3, [r4, #8]
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	441e      	add	r6, r3
 80065d8:	6026      	str	r6, [r4, #0]
 80065da:	2000      	movs	r0, #0
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	462a      	mov	r2, r5
 80065e2:	f000 fb59 	bl	8006c98 <_realloc_r>
 80065e6:	4606      	mov	r6, r0
 80065e8:	2800      	cmp	r0, #0
 80065ea:	d1e1      	bne.n	80065b0 <__ssputs_r+0x70>
 80065ec:	6921      	ldr	r1, [r4, #16]
 80065ee:	4650      	mov	r0, sl
 80065f0:	f000 faa6 	bl	8006b40 <_free_r>
 80065f4:	e7c7      	b.n	8006586 <__ssputs_r+0x46>
	...

080065f8 <_svfiprintf_r>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	b09d      	sub	sp, #116	; 0x74
 80065fe:	4680      	mov	r8, r0
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	898b      	ldrh	r3, [r1, #12]
 8006604:	061c      	lsls	r4, r3, #24
 8006606:	460d      	mov	r5, r1
 8006608:	4616      	mov	r6, r2
 800660a:	d50f      	bpl.n	800662c <_svfiprintf_r+0x34>
 800660c:	690b      	ldr	r3, [r1, #16]
 800660e:	b96b      	cbnz	r3, 800662c <_svfiprintf_r+0x34>
 8006610:	2140      	movs	r1, #64	; 0x40
 8006612:	f000 fae3 	bl	8006bdc <_malloc_r>
 8006616:	6028      	str	r0, [r5, #0]
 8006618:	6128      	str	r0, [r5, #16]
 800661a:	b928      	cbnz	r0, 8006628 <_svfiprintf_r+0x30>
 800661c:	230c      	movs	r3, #12
 800661e:	f8c8 3000 	str.w	r3, [r8]
 8006622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006626:	e0c5      	b.n	80067b4 <_svfiprintf_r+0x1bc>
 8006628:	2340      	movs	r3, #64	; 0x40
 800662a:	616b      	str	r3, [r5, #20]
 800662c:	2300      	movs	r3, #0
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	2320      	movs	r3, #32
 8006632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006636:	2330      	movs	r3, #48	; 0x30
 8006638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800663c:	f04f 0b01 	mov.w	fp, #1
 8006640:	4637      	mov	r7, r6
 8006642:	463c      	mov	r4, r7
 8006644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d13c      	bne.n	80066c6 <_svfiprintf_r+0xce>
 800664c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006650:	d00b      	beq.n	800666a <_svfiprintf_r+0x72>
 8006652:	4653      	mov	r3, sl
 8006654:	4632      	mov	r2, r6
 8006656:	4629      	mov	r1, r5
 8006658:	4640      	mov	r0, r8
 800665a:	f7ff ff71 	bl	8006540 <__ssputs_r>
 800665e:	3001      	adds	r0, #1
 8006660:	f000 80a3 	beq.w	80067aa <_svfiprintf_r+0x1b2>
 8006664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006666:	4453      	add	r3, sl
 8006668:	9309      	str	r3, [sp, #36]	; 0x24
 800666a:	783b      	ldrb	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 809c 	beq.w	80067aa <_svfiprintf_r+0x1b2>
 8006672:	2300      	movs	r3, #0
 8006674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	9307      	str	r3, [sp, #28]
 800667c:	9205      	str	r2, [sp, #20]
 800667e:	9306      	str	r3, [sp, #24]
 8006680:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006684:	931a      	str	r3, [sp, #104]	; 0x68
 8006686:	2205      	movs	r2, #5
 8006688:	7821      	ldrb	r1, [r4, #0]
 800668a:	4850      	ldr	r0, [pc, #320]	; (80067cc <_svfiprintf_r+0x1d4>)
 800668c:	f7f9 fda0 	bl	80001d0 <memchr>
 8006690:	1c67      	adds	r7, r4, #1
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	b9d8      	cbnz	r0, 80066ce <_svfiprintf_r+0xd6>
 8006696:	06d9      	lsls	r1, r3, #27
 8006698:	bf44      	itt	mi
 800669a:	2220      	movmi	r2, #32
 800669c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066a0:	071a      	lsls	r2, r3, #28
 80066a2:	bf44      	itt	mi
 80066a4:	222b      	movmi	r2, #43	; 0x2b
 80066a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066aa:	7822      	ldrb	r2, [r4, #0]
 80066ac:	2a2a      	cmp	r2, #42	; 0x2a
 80066ae:	d016      	beq.n	80066de <_svfiprintf_r+0xe6>
 80066b0:	9a07      	ldr	r2, [sp, #28]
 80066b2:	2100      	movs	r1, #0
 80066b4:	200a      	movs	r0, #10
 80066b6:	4627      	mov	r7, r4
 80066b8:	3401      	adds	r4, #1
 80066ba:	783b      	ldrb	r3, [r7, #0]
 80066bc:	3b30      	subs	r3, #48	; 0x30
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d951      	bls.n	8006766 <_svfiprintf_r+0x16e>
 80066c2:	b1c9      	cbz	r1, 80066f8 <_svfiprintf_r+0x100>
 80066c4:	e011      	b.n	80066ea <_svfiprintf_r+0xf2>
 80066c6:	2b25      	cmp	r3, #37	; 0x25
 80066c8:	d0c0      	beq.n	800664c <_svfiprintf_r+0x54>
 80066ca:	4627      	mov	r7, r4
 80066cc:	e7b9      	b.n	8006642 <_svfiprintf_r+0x4a>
 80066ce:	4a3f      	ldr	r2, [pc, #252]	; (80067cc <_svfiprintf_r+0x1d4>)
 80066d0:	1a80      	subs	r0, r0, r2
 80066d2:	fa0b f000 	lsl.w	r0, fp, r0
 80066d6:	4318      	orrs	r0, r3
 80066d8:	9004      	str	r0, [sp, #16]
 80066da:	463c      	mov	r4, r7
 80066dc:	e7d3      	b.n	8006686 <_svfiprintf_r+0x8e>
 80066de:	9a03      	ldr	r2, [sp, #12]
 80066e0:	1d11      	adds	r1, r2, #4
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	2a00      	cmp	r2, #0
 80066e8:	db01      	blt.n	80066ee <_svfiprintf_r+0xf6>
 80066ea:	9207      	str	r2, [sp, #28]
 80066ec:	e004      	b.n	80066f8 <_svfiprintf_r+0x100>
 80066ee:	4252      	negs	r2, r2
 80066f0:	f043 0302 	orr.w	r3, r3, #2
 80066f4:	9207      	str	r2, [sp, #28]
 80066f6:	9304      	str	r3, [sp, #16]
 80066f8:	783b      	ldrb	r3, [r7, #0]
 80066fa:	2b2e      	cmp	r3, #46	; 0x2e
 80066fc:	d10e      	bne.n	800671c <_svfiprintf_r+0x124>
 80066fe:	787b      	ldrb	r3, [r7, #1]
 8006700:	2b2a      	cmp	r3, #42	; 0x2a
 8006702:	f107 0101 	add.w	r1, r7, #1
 8006706:	d132      	bne.n	800676e <_svfiprintf_r+0x176>
 8006708:	9b03      	ldr	r3, [sp, #12]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	9203      	str	r2, [sp, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	bfb8      	it	lt
 8006714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006718:	3702      	adds	r7, #2
 800671a:	9305      	str	r3, [sp, #20]
 800671c:	4c2c      	ldr	r4, [pc, #176]	; (80067d0 <_svfiprintf_r+0x1d8>)
 800671e:	7839      	ldrb	r1, [r7, #0]
 8006720:	2203      	movs	r2, #3
 8006722:	4620      	mov	r0, r4
 8006724:	f7f9 fd54 	bl	80001d0 <memchr>
 8006728:	b138      	cbz	r0, 800673a <_svfiprintf_r+0x142>
 800672a:	2340      	movs	r3, #64	; 0x40
 800672c:	1b00      	subs	r0, r0, r4
 800672e:	fa03 f000 	lsl.w	r0, r3, r0
 8006732:	9b04      	ldr	r3, [sp, #16]
 8006734:	4303      	orrs	r3, r0
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	3701      	adds	r7, #1
 800673a:	7839      	ldrb	r1, [r7, #0]
 800673c:	4825      	ldr	r0, [pc, #148]	; (80067d4 <_svfiprintf_r+0x1dc>)
 800673e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006742:	2206      	movs	r2, #6
 8006744:	1c7e      	adds	r6, r7, #1
 8006746:	f7f9 fd43 	bl	80001d0 <memchr>
 800674a:	2800      	cmp	r0, #0
 800674c:	d035      	beq.n	80067ba <_svfiprintf_r+0x1c2>
 800674e:	4b22      	ldr	r3, [pc, #136]	; (80067d8 <_svfiprintf_r+0x1e0>)
 8006750:	b9fb      	cbnz	r3, 8006792 <_svfiprintf_r+0x19a>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	3307      	adds	r3, #7
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	3308      	adds	r3, #8
 800675c:	9303      	str	r3, [sp, #12]
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	444b      	add	r3, r9
 8006762:	9309      	str	r3, [sp, #36]	; 0x24
 8006764:	e76c      	b.n	8006640 <_svfiprintf_r+0x48>
 8006766:	fb00 3202 	mla	r2, r0, r2, r3
 800676a:	2101      	movs	r1, #1
 800676c:	e7a3      	b.n	80066b6 <_svfiprintf_r+0xbe>
 800676e:	2300      	movs	r3, #0
 8006770:	9305      	str	r3, [sp, #20]
 8006772:	4618      	mov	r0, r3
 8006774:	240a      	movs	r4, #10
 8006776:	460f      	mov	r7, r1
 8006778:	3101      	adds	r1, #1
 800677a:	783a      	ldrb	r2, [r7, #0]
 800677c:	3a30      	subs	r2, #48	; 0x30
 800677e:	2a09      	cmp	r2, #9
 8006780:	d903      	bls.n	800678a <_svfiprintf_r+0x192>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0ca      	beq.n	800671c <_svfiprintf_r+0x124>
 8006786:	9005      	str	r0, [sp, #20]
 8006788:	e7c8      	b.n	800671c <_svfiprintf_r+0x124>
 800678a:	fb04 2000 	mla	r0, r4, r0, r2
 800678e:	2301      	movs	r3, #1
 8006790:	e7f1      	b.n	8006776 <_svfiprintf_r+0x17e>
 8006792:	ab03      	add	r3, sp, #12
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	462a      	mov	r2, r5
 8006798:	4b10      	ldr	r3, [pc, #64]	; (80067dc <_svfiprintf_r+0x1e4>)
 800679a:	a904      	add	r1, sp, #16
 800679c:	4640      	mov	r0, r8
 800679e:	f3af 8000 	nop.w
 80067a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80067a6:	4681      	mov	r9, r0
 80067a8:	d1d9      	bne.n	800675e <_svfiprintf_r+0x166>
 80067aa:	89ab      	ldrh	r3, [r5, #12]
 80067ac:	065b      	lsls	r3, r3, #25
 80067ae:	f53f af38 	bmi.w	8006622 <_svfiprintf_r+0x2a>
 80067b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067b4:	b01d      	add	sp, #116	; 0x74
 80067b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ba:	ab03      	add	r3, sp, #12
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	462a      	mov	r2, r5
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <_svfiprintf_r+0x1e4>)
 80067c2:	a904      	add	r1, sp, #16
 80067c4:	4640      	mov	r0, r8
 80067c6:	f000 f881 	bl	80068cc <_printf_i>
 80067ca:	e7ea      	b.n	80067a2 <_svfiprintf_r+0x1aa>
 80067cc:	0800750c 	.word	0x0800750c
 80067d0:	08007512 	.word	0x08007512
 80067d4:	08007516 	.word	0x08007516
 80067d8:	00000000 	.word	0x00000000
 80067dc:	08006541 	.word	0x08006541

080067e0 <_printf_common>:
 80067e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e4:	4691      	mov	r9, r2
 80067e6:	461f      	mov	r7, r3
 80067e8:	688a      	ldr	r2, [r1, #8]
 80067ea:	690b      	ldr	r3, [r1, #16]
 80067ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bfb8      	it	lt
 80067f4:	4613      	movlt	r3, r2
 80067f6:	f8c9 3000 	str.w	r3, [r9]
 80067fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067fe:	4606      	mov	r6, r0
 8006800:	460c      	mov	r4, r1
 8006802:	b112      	cbz	r2, 800680a <_printf_common+0x2a>
 8006804:	3301      	adds	r3, #1
 8006806:	f8c9 3000 	str.w	r3, [r9]
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	0699      	lsls	r1, r3, #26
 800680e:	bf42      	ittt	mi
 8006810:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006814:	3302      	addmi	r3, #2
 8006816:	f8c9 3000 	strmi.w	r3, [r9]
 800681a:	6825      	ldr	r5, [r4, #0]
 800681c:	f015 0506 	ands.w	r5, r5, #6
 8006820:	d107      	bne.n	8006832 <_printf_common+0x52>
 8006822:	f104 0a19 	add.w	sl, r4, #25
 8006826:	68e3      	ldr	r3, [r4, #12]
 8006828:	f8d9 2000 	ldr.w	r2, [r9]
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	429d      	cmp	r5, r3
 8006830:	db29      	blt.n	8006886 <_printf_common+0xa6>
 8006832:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	3300      	adds	r3, #0
 800683a:	bf18      	it	ne
 800683c:	2301      	movne	r3, #1
 800683e:	0692      	lsls	r2, r2, #26
 8006840:	d42e      	bmi.n	80068a0 <_printf_common+0xc0>
 8006842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006846:	4639      	mov	r1, r7
 8006848:	4630      	mov	r0, r6
 800684a:	47c0      	blx	r8
 800684c:	3001      	adds	r0, #1
 800684e:	d021      	beq.n	8006894 <_printf_common+0xb4>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	68e5      	ldr	r5, [r4, #12]
 8006854:	f8d9 2000 	ldr.w	r2, [r9]
 8006858:	f003 0306 	and.w	r3, r3, #6
 800685c:	2b04      	cmp	r3, #4
 800685e:	bf08      	it	eq
 8006860:	1aad      	subeq	r5, r5, r2
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	bf0c      	ite	eq
 8006868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800686c:	2500      	movne	r5, #0
 800686e:	4293      	cmp	r3, r2
 8006870:	bfc4      	itt	gt
 8006872:	1a9b      	subgt	r3, r3, r2
 8006874:	18ed      	addgt	r5, r5, r3
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	341a      	adds	r4, #26
 800687c:	454d      	cmp	r5, r9
 800687e:	d11b      	bne.n	80068b8 <_printf_common+0xd8>
 8006880:	2000      	movs	r0, #0
 8006882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006886:	2301      	movs	r3, #1
 8006888:	4652      	mov	r2, sl
 800688a:	4639      	mov	r1, r7
 800688c:	4630      	mov	r0, r6
 800688e:	47c0      	blx	r8
 8006890:	3001      	adds	r0, #1
 8006892:	d103      	bne.n	800689c <_printf_common+0xbc>
 8006894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689c:	3501      	adds	r5, #1
 800689e:	e7c2      	b.n	8006826 <_printf_common+0x46>
 80068a0:	18e1      	adds	r1, r4, r3
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	2030      	movs	r0, #48	; 0x30
 80068a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068aa:	4422      	add	r2, r4
 80068ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068b4:	3302      	adds	r3, #2
 80068b6:	e7c4      	b.n	8006842 <_printf_common+0x62>
 80068b8:	2301      	movs	r3, #1
 80068ba:	4622      	mov	r2, r4
 80068bc:	4639      	mov	r1, r7
 80068be:	4630      	mov	r0, r6
 80068c0:	47c0      	blx	r8
 80068c2:	3001      	adds	r0, #1
 80068c4:	d0e6      	beq.n	8006894 <_printf_common+0xb4>
 80068c6:	f109 0901 	add.w	r9, r9, #1
 80068ca:	e7d7      	b.n	800687c <_printf_common+0x9c>

080068cc <_printf_i>:
 80068cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068d0:	4617      	mov	r7, r2
 80068d2:	7e0a      	ldrb	r2, [r1, #24]
 80068d4:	b085      	sub	sp, #20
 80068d6:	2a6e      	cmp	r2, #110	; 0x6e
 80068d8:	4698      	mov	r8, r3
 80068da:	4606      	mov	r6, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80068e4:	f000 80bc 	beq.w	8006a60 <_printf_i+0x194>
 80068e8:	d81a      	bhi.n	8006920 <_printf_i+0x54>
 80068ea:	2a63      	cmp	r2, #99	; 0x63
 80068ec:	d02e      	beq.n	800694c <_printf_i+0x80>
 80068ee:	d80a      	bhi.n	8006906 <_printf_i+0x3a>
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	f000 80c8 	beq.w	8006a86 <_printf_i+0x1ba>
 80068f6:	2a58      	cmp	r2, #88	; 0x58
 80068f8:	f000 808a 	beq.w	8006a10 <_printf_i+0x144>
 80068fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006900:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006904:	e02a      	b.n	800695c <_printf_i+0x90>
 8006906:	2a64      	cmp	r2, #100	; 0x64
 8006908:	d001      	beq.n	800690e <_printf_i+0x42>
 800690a:	2a69      	cmp	r2, #105	; 0x69
 800690c:	d1f6      	bne.n	80068fc <_printf_i+0x30>
 800690e:	6821      	ldr	r1, [r4, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006916:	d023      	beq.n	8006960 <_printf_i+0x94>
 8006918:	1d11      	adds	r1, r2, #4
 800691a:	6019      	str	r1, [r3, #0]
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	e027      	b.n	8006970 <_printf_i+0xa4>
 8006920:	2a73      	cmp	r2, #115	; 0x73
 8006922:	f000 80b4 	beq.w	8006a8e <_printf_i+0x1c2>
 8006926:	d808      	bhi.n	800693a <_printf_i+0x6e>
 8006928:	2a6f      	cmp	r2, #111	; 0x6f
 800692a:	d02a      	beq.n	8006982 <_printf_i+0xb6>
 800692c:	2a70      	cmp	r2, #112	; 0x70
 800692e:	d1e5      	bne.n	80068fc <_printf_i+0x30>
 8006930:	680a      	ldr	r2, [r1, #0]
 8006932:	f042 0220 	orr.w	r2, r2, #32
 8006936:	600a      	str	r2, [r1, #0]
 8006938:	e003      	b.n	8006942 <_printf_i+0x76>
 800693a:	2a75      	cmp	r2, #117	; 0x75
 800693c:	d021      	beq.n	8006982 <_printf_i+0xb6>
 800693e:	2a78      	cmp	r2, #120	; 0x78
 8006940:	d1dc      	bne.n	80068fc <_printf_i+0x30>
 8006942:	2278      	movs	r2, #120	; 0x78
 8006944:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006948:	496e      	ldr	r1, [pc, #440]	; (8006b04 <_printf_i+0x238>)
 800694a:	e064      	b.n	8006a16 <_printf_i+0x14a>
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006952:	1d11      	adds	r1, r2, #4
 8006954:	6019      	str	r1, [r3, #0]
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e0a3      	b.n	8006aa8 <_printf_i+0x1dc>
 8006960:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006964:	f102 0104 	add.w	r1, r2, #4
 8006968:	6019      	str	r1, [r3, #0]
 800696a:	d0d7      	beq.n	800691c <_printf_i+0x50>
 800696c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006970:	2b00      	cmp	r3, #0
 8006972:	da03      	bge.n	800697c <_printf_i+0xb0>
 8006974:	222d      	movs	r2, #45	; 0x2d
 8006976:	425b      	negs	r3, r3
 8006978:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800697c:	4962      	ldr	r1, [pc, #392]	; (8006b08 <_printf_i+0x23c>)
 800697e:	220a      	movs	r2, #10
 8006980:	e017      	b.n	80069b2 <_printf_i+0xe6>
 8006982:	6820      	ldr	r0, [r4, #0]
 8006984:	6819      	ldr	r1, [r3, #0]
 8006986:	f010 0f80 	tst.w	r0, #128	; 0x80
 800698a:	d003      	beq.n	8006994 <_printf_i+0xc8>
 800698c:	1d08      	adds	r0, r1, #4
 800698e:	6018      	str	r0, [r3, #0]
 8006990:	680b      	ldr	r3, [r1, #0]
 8006992:	e006      	b.n	80069a2 <_printf_i+0xd6>
 8006994:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006998:	f101 0004 	add.w	r0, r1, #4
 800699c:	6018      	str	r0, [r3, #0]
 800699e:	d0f7      	beq.n	8006990 <_printf_i+0xc4>
 80069a0:	880b      	ldrh	r3, [r1, #0]
 80069a2:	4959      	ldr	r1, [pc, #356]	; (8006b08 <_printf_i+0x23c>)
 80069a4:	2a6f      	cmp	r2, #111	; 0x6f
 80069a6:	bf14      	ite	ne
 80069a8:	220a      	movne	r2, #10
 80069aa:	2208      	moveq	r2, #8
 80069ac:	2000      	movs	r0, #0
 80069ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80069b2:	6865      	ldr	r5, [r4, #4]
 80069b4:	60a5      	str	r5, [r4, #8]
 80069b6:	2d00      	cmp	r5, #0
 80069b8:	f2c0 809c 	blt.w	8006af4 <_printf_i+0x228>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	f020 0004 	bic.w	r0, r0, #4
 80069c2:	6020      	str	r0, [r4, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d13f      	bne.n	8006a48 <_printf_i+0x17c>
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	f040 8095 	bne.w	8006af8 <_printf_i+0x22c>
 80069ce:	4675      	mov	r5, lr
 80069d0:	2a08      	cmp	r2, #8
 80069d2:	d10b      	bne.n	80069ec <_printf_i+0x120>
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	07da      	lsls	r2, r3, #31
 80069d8:	d508      	bpl.n	80069ec <_printf_i+0x120>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	6862      	ldr	r2, [r4, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	bfde      	ittt	le
 80069e2:	2330      	movle	r3, #48	; 0x30
 80069e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80069e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80069ec:	ebae 0305 	sub.w	r3, lr, r5
 80069f0:	6123      	str	r3, [r4, #16]
 80069f2:	f8cd 8000 	str.w	r8, [sp]
 80069f6:	463b      	mov	r3, r7
 80069f8:	aa03      	add	r2, sp, #12
 80069fa:	4621      	mov	r1, r4
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff feef 	bl	80067e0 <_printf_common>
 8006a02:	3001      	adds	r0, #1
 8006a04:	d155      	bne.n	8006ab2 <_printf_i+0x1e6>
 8006a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a0a:	b005      	add	sp, #20
 8006a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a10:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006a14:	493c      	ldr	r1, [pc, #240]	; (8006b08 <_printf_i+0x23c>)
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a1e:	f100 0504 	add.w	r5, r0, #4
 8006a22:	601d      	str	r5, [r3, #0]
 8006a24:	d001      	beq.n	8006a2a <_printf_i+0x15e>
 8006a26:	6803      	ldr	r3, [r0, #0]
 8006a28:	e002      	b.n	8006a30 <_printf_i+0x164>
 8006a2a:	0655      	lsls	r5, r2, #25
 8006a2c:	d5fb      	bpl.n	8006a26 <_printf_i+0x15a>
 8006a2e:	8803      	ldrh	r3, [r0, #0]
 8006a30:	07d0      	lsls	r0, r2, #31
 8006a32:	bf44      	itt	mi
 8006a34:	f042 0220 	orrmi.w	r2, r2, #32
 8006a38:	6022      	strmi	r2, [r4, #0]
 8006a3a:	b91b      	cbnz	r3, 8006a44 <_printf_i+0x178>
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	f022 0220 	bic.w	r2, r2, #32
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	2210      	movs	r2, #16
 8006a46:	e7b1      	b.n	80069ac <_printf_i+0xe0>
 8006a48:	4675      	mov	r5, lr
 8006a4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a4e:	fb02 3310 	mls	r3, r2, r0, r3
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d1f5      	bne.n	8006a4a <_printf_i+0x17e>
 8006a5e:	e7b7      	b.n	80069d0 <_printf_i+0x104>
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	6949      	ldr	r1, [r1, #20]
 8006a66:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006a6a:	d004      	beq.n	8006a76 <_printf_i+0x1aa>
 8006a6c:	1d10      	adds	r0, r2, #4
 8006a6e:	6018      	str	r0, [r3, #0]
 8006a70:	6813      	ldr	r3, [r2, #0]
 8006a72:	6019      	str	r1, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <_printf_i+0x1ba>
 8006a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a7a:	f102 0004 	add.w	r0, r2, #4
 8006a7e:	6018      	str	r0, [r3, #0]
 8006a80:	6813      	ldr	r3, [r2, #0]
 8006a82:	d0f6      	beq.n	8006a72 <_printf_i+0x1a6>
 8006a84:	8019      	strh	r1, [r3, #0]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	4675      	mov	r5, lr
 8006a8c:	e7b1      	b.n	80069f2 <_printf_i+0x126>
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	1d11      	adds	r1, r2, #4
 8006a92:	6019      	str	r1, [r3, #0]
 8006a94:	6815      	ldr	r5, [r2, #0]
 8006a96:	6862      	ldr	r2, [r4, #4]
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f7f9 fb98 	bl	80001d0 <memchr>
 8006aa0:	b108      	cbz	r0, 8006aa6 <_printf_i+0x1da>
 8006aa2:	1b40      	subs	r0, r0, r5
 8006aa4:	6060      	str	r0, [r4, #4]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab0:	e79f      	b.n	80069f2 <_printf_i+0x126>
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4639      	mov	r1, r7
 8006ab8:	4630      	mov	r0, r6
 8006aba:	47c0      	blx	r8
 8006abc:	3001      	adds	r0, #1
 8006abe:	d0a2      	beq.n	8006a06 <_printf_i+0x13a>
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	079b      	lsls	r3, r3, #30
 8006ac4:	d507      	bpl.n	8006ad6 <_printf_i+0x20a>
 8006ac6:	2500      	movs	r5, #0
 8006ac8:	f104 0919 	add.w	r9, r4, #25
 8006acc:	68e3      	ldr	r3, [r4, #12]
 8006ace:	9a03      	ldr	r2, [sp, #12]
 8006ad0:	1a9b      	subs	r3, r3, r2
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	db05      	blt.n	8006ae2 <_printf_i+0x216>
 8006ad6:	68e0      	ldr	r0, [r4, #12]
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	4298      	cmp	r0, r3
 8006adc:	bfb8      	it	lt
 8006ade:	4618      	movlt	r0, r3
 8006ae0:	e793      	b.n	8006a0a <_printf_i+0x13e>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	464a      	mov	r2, r9
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	4630      	mov	r0, r6
 8006aea:	47c0      	blx	r8
 8006aec:	3001      	adds	r0, #1
 8006aee:	d08a      	beq.n	8006a06 <_printf_i+0x13a>
 8006af0:	3501      	adds	r5, #1
 8006af2:	e7eb      	b.n	8006acc <_printf_i+0x200>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1a7      	bne.n	8006a48 <_printf_i+0x17c>
 8006af8:	780b      	ldrb	r3, [r1, #0]
 8006afa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006afe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b02:	e765      	b.n	80069d0 <_printf_i+0x104>
 8006b04:	0800752e 	.word	0x0800752e
 8006b08:	0800751d 	.word	0x0800751d

08006b0c <memmove>:
 8006b0c:	4288      	cmp	r0, r1
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	eb01 0302 	add.w	r3, r1, r2
 8006b14:	d803      	bhi.n	8006b1e <memmove+0x12>
 8006b16:	1e42      	subs	r2, r0, #1
 8006b18:	4299      	cmp	r1, r3
 8006b1a:	d10c      	bne.n	8006b36 <memmove+0x2a>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	d2f9      	bcs.n	8006b16 <memmove+0xa>
 8006b22:	1881      	adds	r1, r0, r2
 8006b24:	1ad2      	subs	r2, r2, r3
 8006b26:	42d3      	cmn	r3, r2
 8006b28:	d100      	bne.n	8006b2c <memmove+0x20>
 8006b2a:	bd10      	pop	{r4, pc}
 8006b2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006b34:	e7f7      	b.n	8006b26 <memmove+0x1a>
 8006b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b3e:	e7eb      	b.n	8006b18 <memmove+0xc>

08006b40 <_free_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d045      	beq.n	8006bd4 <_free_r+0x94>
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f0c      	subs	r4, r1, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	18e4      	addlt	r4, r4, r3
 8006b54:	f000 f8d6 	bl	8006d04 <__malloc_lock>
 8006b58:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <_free_r+0x98>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	b933      	cbnz	r3, 8006b6e <_free_r+0x2e>
 8006b60:	6063      	str	r3, [r4, #4]
 8006b62:	6014      	str	r4, [r2, #0]
 8006b64:	4628      	mov	r0, r5
 8006b66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6a:	f000 b8cc 	b.w	8006d06 <__malloc_unlock>
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	d90c      	bls.n	8006b8c <_free_r+0x4c>
 8006b72:	6821      	ldr	r1, [r4, #0]
 8006b74:	1862      	adds	r2, r4, r1
 8006b76:	4293      	cmp	r3, r2
 8006b78:	bf04      	itt	eq
 8006b7a:	681a      	ldreq	r2, [r3, #0]
 8006b7c:	685b      	ldreq	r3, [r3, #4]
 8006b7e:	6063      	str	r3, [r4, #4]
 8006b80:	bf04      	itt	eq
 8006b82:	1852      	addeq	r2, r2, r1
 8006b84:	6022      	streq	r2, [r4, #0]
 8006b86:	6004      	str	r4, [r0, #0]
 8006b88:	e7ec      	b.n	8006b64 <_free_r+0x24>
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	b10a      	cbz	r2, 8006b94 <_free_r+0x54>
 8006b90:	42a2      	cmp	r2, r4
 8006b92:	d9fa      	bls.n	8006b8a <_free_r+0x4a>
 8006b94:	6819      	ldr	r1, [r3, #0]
 8006b96:	1858      	adds	r0, r3, r1
 8006b98:	42a0      	cmp	r0, r4
 8006b9a:	d10b      	bne.n	8006bb4 <_free_r+0x74>
 8006b9c:	6820      	ldr	r0, [r4, #0]
 8006b9e:	4401      	add	r1, r0
 8006ba0:	1858      	adds	r0, r3, r1
 8006ba2:	4282      	cmp	r2, r0
 8006ba4:	6019      	str	r1, [r3, #0]
 8006ba6:	d1dd      	bne.n	8006b64 <_free_r+0x24>
 8006ba8:	6810      	ldr	r0, [r2, #0]
 8006baa:	6852      	ldr	r2, [r2, #4]
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	4401      	add	r1, r0
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	e7d7      	b.n	8006b64 <_free_r+0x24>
 8006bb4:	d902      	bls.n	8006bbc <_free_r+0x7c>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	602b      	str	r3, [r5, #0]
 8006bba:	e7d3      	b.n	8006b64 <_free_r+0x24>
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	1821      	adds	r1, r4, r0
 8006bc0:	428a      	cmp	r2, r1
 8006bc2:	bf04      	itt	eq
 8006bc4:	6811      	ldreq	r1, [r2, #0]
 8006bc6:	6852      	ldreq	r2, [r2, #4]
 8006bc8:	6062      	str	r2, [r4, #4]
 8006bca:	bf04      	itt	eq
 8006bcc:	1809      	addeq	r1, r1, r0
 8006bce:	6021      	streq	r1, [r4, #0]
 8006bd0:	605c      	str	r4, [r3, #4]
 8006bd2:	e7c7      	b.n	8006b64 <_free_r+0x24>
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001588 	.word	0x20001588

08006bdc <_malloc_r>:
 8006bdc:	b570      	push	{r4, r5, r6, lr}
 8006bde:	1ccd      	adds	r5, r1, #3
 8006be0:	f025 0503 	bic.w	r5, r5, #3
 8006be4:	3508      	adds	r5, #8
 8006be6:	2d0c      	cmp	r5, #12
 8006be8:	bf38      	it	cc
 8006bea:	250c      	movcc	r5, #12
 8006bec:	2d00      	cmp	r5, #0
 8006bee:	4606      	mov	r6, r0
 8006bf0:	db01      	blt.n	8006bf6 <_malloc_r+0x1a>
 8006bf2:	42a9      	cmp	r1, r5
 8006bf4:	d903      	bls.n	8006bfe <_malloc_r+0x22>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	6033      	str	r3, [r6, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	bd70      	pop	{r4, r5, r6, pc}
 8006bfe:	f000 f881 	bl	8006d04 <__malloc_lock>
 8006c02:	4a23      	ldr	r2, [pc, #140]	; (8006c90 <_malloc_r+0xb4>)
 8006c04:	6814      	ldr	r4, [r2, #0]
 8006c06:	4621      	mov	r1, r4
 8006c08:	b991      	cbnz	r1, 8006c30 <_malloc_r+0x54>
 8006c0a:	4c22      	ldr	r4, [pc, #136]	; (8006c94 <_malloc_r+0xb8>)
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	b91b      	cbnz	r3, 8006c18 <_malloc_r+0x3c>
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 f867 	bl	8006ce4 <_sbrk_r>
 8006c16:	6020      	str	r0, [r4, #0]
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 f862 	bl	8006ce4 <_sbrk_r>
 8006c20:	1c43      	adds	r3, r0, #1
 8006c22:	d126      	bne.n	8006c72 <_malloc_r+0x96>
 8006c24:	230c      	movs	r3, #12
 8006c26:	6033      	str	r3, [r6, #0]
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f000 f86c 	bl	8006d06 <__malloc_unlock>
 8006c2e:	e7e4      	b.n	8006bfa <_malloc_r+0x1e>
 8006c30:	680b      	ldr	r3, [r1, #0]
 8006c32:	1b5b      	subs	r3, r3, r5
 8006c34:	d41a      	bmi.n	8006c6c <_malloc_r+0x90>
 8006c36:	2b0b      	cmp	r3, #11
 8006c38:	d90f      	bls.n	8006c5a <_malloc_r+0x7e>
 8006c3a:	600b      	str	r3, [r1, #0]
 8006c3c:	50cd      	str	r5, [r1, r3]
 8006c3e:	18cc      	adds	r4, r1, r3
 8006c40:	4630      	mov	r0, r6
 8006c42:	f000 f860 	bl	8006d06 <__malloc_unlock>
 8006c46:	f104 000b 	add.w	r0, r4, #11
 8006c4a:	1d23      	adds	r3, r4, #4
 8006c4c:	f020 0007 	bic.w	r0, r0, #7
 8006c50:	1ac3      	subs	r3, r0, r3
 8006c52:	d01b      	beq.n	8006c8c <_malloc_r+0xb0>
 8006c54:	425a      	negs	r2, r3
 8006c56:	50e2      	str	r2, [r4, r3]
 8006c58:	bd70      	pop	{r4, r5, r6, pc}
 8006c5a:	428c      	cmp	r4, r1
 8006c5c:	bf0d      	iteet	eq
 8006c5e:	6863      	ldreq	r3, [r4, #4]
 8006c60:	684b      	ldrne	r3, [r1, #4]
 8006c62:	6063      	strne	r3, [r4, #4]
 8006c64:	6013      	streq	r3, [r2, #0]
 8006c66:	bf18      	it	ne
 8006c68:	460c      	movne	r4, r1
 8006c6a:	e7e9      	b.n	8006c40 <_malloc_r+0x64>
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	6849      	ldr	r1, [r1, #4]
 8006c70:	e7ca      	b.n	8006c08 <_malloc_r+0x2c>
 8006c72:	1cc4      	adds	r4, r0, #3
 8006c74:	f024 0403 	bic.w	r4, r4, #3
 8006c78:	42a0      	cmp	r0, r4
 8006c7a:	d005      	beq.n	8006c88 <_malloc_r+0xac>
 8006c7c:	1a21      	subs	r1, r4, r0
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f000 f830 	bl	8006ce4 <_sbrk_r>
 8006c84:	3001      	adds	r0, #1
 8006c86:	d0cd      	beq.n	8006c24 <_malloc_r+0x48>
 8006c88:	6025      	str	r5, [r4, #0]
 8006c8a:	e7d9      	b.n	8006c40 <_malloc_r+0x64>
 8006c8c:	bd70      	pop	{r4, r5, r6, pc}
 8006c8e:	bf00      	nop
 8006c90:	20001588 	.word	0x20001588
 8006c94:	2000158c 	.word	0x2000158c

08006c98 <_realloc_r>:
 8006c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	b921      	cbnz	r1, 8006cac <_realloc_r+0x14>
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ca8:	f7ff bf98 	b.w	8006bdc <_malloc_r>
 8006cac:	b922      	cbnz	r2, 8006cb8 <_realloc_r+0x20>
 8006cae:	f7ff ff47 	bl	8006b40 <_free_r>
 8006cb2:	4625      	mov	r5, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb8:	f000 f826 	bl	8006d08 <_malloc_usable_size_r>
 8006cbc:	4284      	cmp	r4, r0
 8006cbe:	d90f      	bls.n	8006ce0 <_realloc_r+0x48>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	f7ff ff8a 	bl	8006bdc <_malloc_r>
 8006cc8:	4605      	mov	r5, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d0f2      	beq.n	8006cb4 <_realloc_r+0x1c>
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	f7ff fbfd 	bl	80064d0 <memcpy>
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff ff31 	bl	8006b40 <_free_r>
 8006cde:	e7e9      	b.n	8006cb4 <_realloc_r+0x1c>
 8006ce0:	4635      	mov	r5, r6
 8006ce2:	e7e7      	b.n	8006cb4 <_realloc_r+0x1c>

08006ce4 <_sbrk_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4c06      	ldr	r4, [pc, #24]	; (8006d00 <_sbrk_r+0x1c>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4605      	mov	r5, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	f7f9 fc70 	bl	80005d4 <_sbrk>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_sbrk_r+0x1a>
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_sbrk_r+0x1a>
 8006cfc:	602b      	str	r3, [r5, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	200017dc 	.word	0x200017dc

08006d04 <__malloc_lock>:
 8006d04:	4770      	bx	lr

08006d06 <__malloc_unlock>:
 8006d06:	4770      	bx	lr

08006d08 <_malloc_usable_size_r>:
 8006d08:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	f1a0 0004 	sub.w	r0, r0, #4
 8006d12:	bfbc      	itt	lt
 8006d14:	580b      	ldrlt	r3, [r1, r0]
 8006d16:	18c0      	addlt	r0, r0, r3
 8006d18:	4770      	bx	lr
	...

08006d1c <_init>:
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	bf00      	nop
 8006d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d22:	bc08      	pop	{r3}
 8006d24:	469e      	mov	lr, r3
 8006d26:	4770      	bx	lr

08006d28 <_fini>:
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	bf00      	nop
 8006d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2e:	bc08      	pop	{r3}
 8006d30:	469e      	mov	lr, r3
 8006d32:	4770      	bx	lr
